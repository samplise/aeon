/* 
 * GroupJoinHandler.mh : part of the Mace toolkit for building distributed systems
 * 
 * Copyright (c) 2011, Charles Killian, James W. Anderson, Ryan Braud
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of the contributors, nor their associated universities 
 *      or organizations may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ----END-OF-LEGAL-STUFF---- */
#include <string>
#include "MaceTypes.h"
#include "mace_constants.h"
#include "OverlayJoinHandler.h"

handler GroupJoin {
  // return true if ident is verified, false if node should be rejected
  virtual bool verifyJoinGroup(const MaceKey& groupId, const MaceKey& source) { return true; }
  virtual void peerJoinedGroup(const MaceKey& groupId, 
			       const MaceKey& peer) { }

  // called with the result of a join
  virtual void joinResultGroup(const MaceKey& groupId, const MaceKey& source,
			       join_status_t status) { }

  // called when the set of groups joined for a given handler 
  // (the one the upcall is going to) changes.
  // Q: Do we need both of these?  The point is that this node may join
  // a group for a given handler because it does so on behalf of another
  // node -- but the local application may not actually be subscribed.
  virtual void notifyJoinedGroups(NodeSet groups) { }
  virtual void notifySubscribedGroups(NodeSet groups) { }
}; // GroupJoinHandler
