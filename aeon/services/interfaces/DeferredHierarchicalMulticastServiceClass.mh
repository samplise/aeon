/* 
 * DeferredHierarchicalMulticastServiceClass.mh : part of the Mace toolkit for building distributed systems
 * 
 * Copyright (c) 2007, Charles Killian, James W. Anderson, Ryan Braud
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in
 *      the documentation and/or other materials provided with the
 *      distribution.
 *    * Neither the names of Duke University nor The University of
 *      California, San Diego, nor the names of the authors or contributors
 *      may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ----END-OF-LEGAL-STUFF---- */
#include "mace_constants.h"

//NOTE: HMSC derives from MSC because collect and distribute can be 
// trivially used to provide multicast.
serviceclass DeferredHierarchicalMulticast : DeferredMulticast {
  //Note: For collect and distribute, "dest" is the group id if this is also
  // a group service, otherwise the behavior is not well specified.  This could
  // be used to implement a channel abstraction.  But, what should be true is
  // that services providing HeirarchicalMulticastServiceClass should deliver
  // the input dest field as the "destination" part of the callback.

  //REM: When delivering a collect or distribute message, the 
  // communicationType parameter SHOULD be set to COMM_TYPE_COLLECT
  // or COMM_TYPE_DISTRIBUTE, accordingly.  These are specified 
  // in lib/mace_constants.h
  
  //sends data UP: Terminates at the root of the heirarchy.
  virtual bool collect(const MaceKey& dest, const mace::string& s) { return false; }

  //sends data DOWN
  virtual bool distribute(const MaceKey& dest, const mace::string& s) { return false; }
};
