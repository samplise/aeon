/* 
 * DHTServiceClass.mh : part of the Mace toolkit for building distributed systems
 * 
 * Copyright (c) 2011, Charles Killian, James W. Anderson, Ryan Braud
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of the contributors, nor their associated universities 
 *      or organizations may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ----END-OF-LEGAL-STUFF---- */
serviceclass DHT {
  virtual void containsKey(const MaceKey& key) [syncname=syncContainsKey; type=block; id=key; callback=dhtContainsKeyResult];
  virtual void get(const MaceKey& key) [syncname=syncGet; type=block; id=key; callback=dhtGetResult];
  virtual void put(const MaceKey& key, const std::string& value);
  virtual void remove(const MaceKey& key);

  handlers DHTData;
//   //NOTE: The following two functions will be inherited.  They will
//   //not be implemented by a thing providing DHTServiceClass.  

//   //NOTE: We should parse these, and generate only downcall methods
//   //for them. (i.e. not let people implement them).
//   void putSerializable(const MaceKey& key, const mace::Serializable& value) {
//     mace::string str;
//     value.serialize(str);
//     put(key, str, registrationUid);
//   }
//   //XXX: Was this what you wanted James?

//   // YES, but it is broken, because get is asynchronous...this will
//   // only work if waitForCallback is set false after the call
//   void getSerializable(const MaceKey& key, mace::Serializable& value, bool& found,
// 		       bool& waitForCallback) {
//     mace::string str;
//     get(key, str, found, waitForCallback, registrationUid);
//     istringstream stream(str);
//     value.deserialize(stream);
//   }
}; // DHTServiceClass

