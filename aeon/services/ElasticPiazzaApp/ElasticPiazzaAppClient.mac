#include <random>

service ElasticPiazzaAppClient;

provides Null;

services {
  Transport t;
}

constants {
  uint8_t D_REQUEST = 0;
  uint8_t C_REQUEST = 1;
  uint8_t S_REQUEST = 2;
}

constructor_parameters {
  NodeSet HeadNode = NodeSet(); /* Should be only one node */

  uint32_t N_CLIENTS = 8;  
  uint32_t N_DEPARTMENTS = 4;
  uint32_t N_COURSES = 16;
  uint32_t N_STUDENTS = 160;

  uint32_t D_PERCENT = 20;
  uint32_t C_PERCENT = 50;
  uint32_t S_PERCENT = 100;

  uint64_t OUTPUT_COUNT = 100;

  uint64_t WARMUP_TIME_PERIOD = 120;

  uint64_t DAY_PERIOD = 100;
  uint32_t DAY_NUMBER = 3; 

  double DAY_JOIN = 0.2;
  double DAY_LEAVE = 0.5;
  double DAY_ERROR = 0.15;
}

typedefs {
  
}

#minclude "ElasticPiazzaAppMessages.mi"

auto_types {
  
}

state_variables {
  context Controller {
    mace::map<uint32_t, uint64_t> join_times;
    mace::map<uint32_t, uint64_t> leave_times;

    uint64_t current_day_start;
    uint64_t current_day_end;
    uint64_t current_day_mid;

    uint64_t exact_start_time;

    uint64_t sleep_time_period;

    uint32_t current_day;

    uint32_t current_client_number;
    MaceKey serverAddr;
  }
  
  context Client<uint32_t clientId> {
    bool isActive;
    uint32_t c_id;

    uint32_t d_request_count;
    uint32_t c_request_count;
    uint32_t s_request_count;
    uint32_t total_request_count;

    MaceKey serverAddr;

    uint64_t total_latency;
    uint64_t d_latency;
    uint64_t c_latency;
    uint64_t s_latency;

    uint64_t last_request_timestamp;
    uint8_t last_request_type;
  }
}

local_address {
  return downcall_localAddress();
}


transitions {
  downcall maceInit() {
    ADD_SELECTORS("ElasticPiazzaAppClient");

    srand( mace::getmtime() );
    maceout << "HeadNode=" <<HeadNode << Log::endl;
    ASSERT( HeadNode.size() == 1 );
    for( uint32_t i=0; i<N_CLIENTS; i++) {
      mace::string clientCtxName = generateContextName("Client", i);
      createNewOwnership( "globalContext", clientCtxName );
      async_initClient(i);
    }

    createNewOwnership("globalContext", "Controller");
    async_initController();
  }

  async [Controller] initController() {
    ADD_SELECTORS("ElasticPiazzaAppClient");
    
    maceout<<"Initializing Controller!" << Log::endl;
    current_client_number = 0;
    serverAddr = *(HeadNode.begin());
    async_startController();
  }

  async [Controller] startController() {
    ADD_SELECTORS("ElasticPiazzaAppClient");
    sleep(WARMUP_TIME_PERIOD);
    maceout<< "Start Controller!" << Log::endl;
    

    current_day_start = 2;
    current_day_end = current_day_start + DAY_PERIOD;
    current_day_mid = (current_day_start+current_day_end) / 2;

    mace::vector<uint32_t> clientIds;
    for(uint32_t i=1; i< N_CLIENTS; i++){
      async_setActive(i, false); 
      clientIds.push_back(i);
    }
    current_client_number = 1;
    join_times = generateRandomJoinTime( current_day_start, current_day_end, clientIds );
    leave_times = generateRandomLeaveTime( current_day_start, current_day_end, clientIds );

    exact_start_time = mace::getmtime();
    sleep_time_period = 0;
    current_day = 1;

    async_launchTimeScheduler();
  }

  async [Client<clientId>] setActive( uint32_t const& clientId, bool const& active ) {
    ADD_SELECTORS("ElasticPiazzaAppClient");
    bool original = isActive;
    if( active ) {
      maceout<< "Set Client("<< clientId <<") active!" << Log::endl;
    } else {
      maceout<< "Set Client("<< clientId <<") inactive" << Log::endl;
    }

    isActive = active;
    if( isActive && !original ) {
      maceout << "To launch requests!" << Log::endl;
      async_launchRequest(clientId);
    }
  }

  async [Controller] launchTimeScheduler() {
    ADD_SELECTORS("ElasticPiazzaAppClient");
    maceout<<"sleep time=" << sleep_time_period << Log::endl;
    sleep(sleep_time_period);
    uint64_t exact_current_time = mace::getmtime();
    
    uint64_t client_number_record = current_client_number;

    uint64_t current_time = (uint64_t) (exact_current_time - exact_start_time) / 1000000;
 
    mace::vector<uint64_t> toRemoved;
    uint64_t next_join_time = 0;
    uint64_t next_leave_time = 0;
    if( current_time <= current_day_mid ) {
      mace::map<uint32_t, uint64_t>::iterator iter = join_times.begin();
      for(; iter != join_times.end(); iter++ ){
        if( current_time >= iter->second ) {
          async_setActive( iter->first, true);
          current_client_number ++;
          toRemoved.push_back(iter->first);
        } else {
          if( next_join_time == 0 ) {
            next_join_time = iter->second;
          } else if( next_join_time > iter->second ) {
            next_join_time = iter->second;
          }
        }
      }
      for( uint64_t i=0; i<toRemoved.size(); i++ ) {
        join_times.erase( toRemoved[i] );
      }

    } else if ( current_time > current_day_mid ) {
      mace::map<uint32_t, uint64_t>::iterator iter = leave_times.begin();
      for(; iter != leave_times.end(); iter++ ) {
        if( current_time >= iter->second ) {
          async_setActive( iter->first, false);
          current_client_number --;
          toRemoved.push_back( iter->first );
        } else {
          if( next_leave_time == 0 ) {
            next_leave_time = iter->second;
          } else if( next_leave_time > iter->second ) {
            next_leave_time = iter->second;
          }
        } 
      }

      for( uint64_t i=0; i<toRemoved.size(); i++ ) {
        leave_times.erase( toRemoved[i] );
      }
    }

    maceout<<"next_join_time=" << next_join_time<<" next_leave_time="<< next_leave_time << Log::endl;
    if( next_join_time != 0 ) {
      sleep_time_period = next_join_time - current_time;
      async_launchTimeScheduler();
    } else if( next_leave_time != 0 ) {
      sleep_time_period = next_leave_time - current_time;
      async_launchTimeScheduler();
    } else {
      if( join_times.empty() && !leave_times.empty() ) {
        maceout << "Clients start to leave!" << Log::endl;
        mace::map<uint32_t, uint64_t>::iterator iter = leave_times.begin();
        for(; iter != leave_times.end(); iter++ ) {
          if( next_leave_time == 0 ) {
            next_leave_time = iter->second;
          } else if( next_leave_time > iter->second ) {
            next_leave_time = iter->second;
          }
        }
        sleep_time_period = next_leave_time - current_time;
        async_launchTimeScheduler();
      } else if( join_times.empty() && leave_times.empty() ) {
        current_day ++;
        maceout << "To start a new day " << current_day << Log::endl;
        if( current_day <= DAY_NUMBER) {
          current_day_start = 2 + current_day_end;
          current_day_end = current_day_start + DAY_PERIOD;
          current_day_mid = (current_day_start+current_day_end) / 2;

          mace::vector<uint32_t> clientIds;
          for(uint32_t i=1; i< N_CLIENTS; i++) clientIds.push_back(i);
          join_times = generateRandomJoinTime( current_day_start, current_day_end, clientIds );
          leave_times = generateRandomLeaveTime( current_day_start, current_day_end, clientIds );

          mace::map<uint32_t, uint64_t>::iterator iter = join_times.begin();
          for(; iter != join_times.end(); iter++ ) {
            if( next_join_time == 0 ) {
              next_join_time = iter->second;
            } else if( next_join_time > iter->second ) {
              next_join_time = iter->second;
            }
          }
          sleep_time_period = next_join_time - current_time;
          async_launchTimeScheduler();
        } else {
          maceout << "Now to stop experiments!" << Log::endl;
          for(uint32_t i=0; i< N_CLIENTS; i++) {
            async_setActive(i, false);
          }
        }
      }
    }
    maceout<< "Current Active Clients: " << current_client_number << Log::endl;
    if( client_number_record != current_client_number) {
      downcall_route(serverAddr, ClientNumberReport(current_client_number) );
    }
  }

  async [Client<clientId>] initClient( uint32_t const& clientId) {
    ADD_SELECTORS("ElasticPiazzaAppClient");
        
    isActive = false;
    c_id = clientId;

    d_request_count = 0;
    c_request_count = 0;
    s_request_count = 0;
    total_request_count = 0;

    total_latency = 0;
    d_latency = 0;
    c_latency = 0;
    s_latency = 0;

    maceout << "To initialize client " << clientId << Log::endl;
    downcall_route( *(HeadNode.begin()), ConnectionRequest(clientId) );
  }

  async [Client<clientId>] launchRequest( uint32_t const& clientId ) {
    ADD_SELECTORS("ElasticPiazzaAppClient");

    if( !isActive ){
      return;
    }

    last_request_timestamp = mace::getmtime();
        
    uint32_t target_percent =  (uint32_t) rand()%100;
    
    if( target_percent < D_PERCENT ) {
      uint32_t d_id = (uint32_t) rand() % N_DEPARTMENTS + 1;
      last_request_type = D_REQUEST;
      downcall_route( serverAddr, DepartmentRequest(clientId, d_id) );
    } else if(target_percent < C_PERCENT ) {
      uint32_t c_id = (uint32_t) rand() % N_COURSES + 1;
      last_request_type = C_REQUEST;
      downcall_route( serverAddr, CourseRequest(clientId, c_id) );
    } else {
      uint32_t s_id = (uint32_t) rand() % N_STUDENTS + 1;
      last_request_type = S_REQUEST;
      downcall_route( serverAddr, StudentRequest(clientId, s_id) );
    }
  }

  upcall [Client< msg.clientId >] deliver(const MaceKey& src, const MaceKey& dest, const Response& msg) {
    ADD_SELECTORS("ElasticPiazzaAppClient");

    total_request_count ++;
    
    uint64_t latency = mace::getmtime() - last_request_timestamp;
    total_latency += latency;

    if( last_request_type == D_REQUEST ){
      d_latency += latency;
      d_request_count ++;
    } else if( last_request_type == C_REQUEST ){
      c_latency += latency;
      c_request_count ++;
    } else if( last_request_type == S_REQUEST ){
      s_latency += latency;
      s_request_count ++;
    }

    if( total_request_count % OUTPUT_COUNT == 0 ) {
      uint64_t avg_latency = (uint64_t) (total_latency / OUTPUT_COUNT);

      uint64_t avg_d_latency = 0;
      uint64_t avg_c_latency = 0;
      uint64_t avg_s_latency = 0;

      if( d_request_count > 0 ){
        avg_d_latency = d_latency / d_request_count;
      }

      if( c_request_count > 0 ){
        avg_c_latency = c_latency / c_request_count;
      }

      if( s_request_count > 0 ){
        avg_s_latency = s_latency / s_request_count;
      }


      maceout<< "Client("<< c_id <<"): requestCount=" << total_request_count << " avg_latency=" << avg_latency << " d_count=" << d_request_count <<" avg_d_latency=" << avg_d_latency <<" c_count=" << c_request_count <<" avg_c_latency=" << avg_c_latency << " s_count=" << s_request_count <<" avg_s_latency=" << avg_s_latency << Log::endl;

      
      d_request_count = 0;
      c_request_count = 0;
      s_request_count = 0;
      
      d_latency = 0;
      c_latency = 0;
      s_latency = 0;
      total_latency = 0;      
      
    }
    if( isActive ) {
      last_request_timestamp = mace::getmtime();
        
      uint32_t target_percent =  (uint32_t) rand()%100;
    
      if( target_percent < D_PERCENT ) {
        uint32_t d_id = (uint32_t) rand() % N_DEPARTMENTS + 1;
        last_request_type = D_REQUEST;
        downcall_route( serverAddr, DepartmentRequest(msg.clientId, d_id) );
      } else if(target_percent < C_PERCENT ) {
        uint32_t c_id = (uint32_t) rand() % N_COURSES + 1;
        last_request_type = C_REQUEST;
        downcall_route( serverAddr, CourseRequest(msg.clientId, c_id) );
      } else {
        uint32_t s_id = (uint32_t) rand() % N_STUDENTS + 1;
        last_request_type = S_REQUEST;
        downcall_route( serverAddr, StudentRequest(msg.clientId, s_id) );
      }
    }
  }

  
  upcall [Client<msg.clientId>] deliver(const MaceKey& src, const MaceKey& dest, const ConnectionSetup& msg) {
    ADD_SELECTORS("PiazzaAppClient");
    serverAddr = msg.proxyAddr;
    maceout<< "Client("<< msg.clientId<<")'s new serverAddr=" << serverAddr << Log::endl;
    if( msg.clientId == 0 ){
      isActive = true;
    }
    sleep(1);
    async_launchRequest(msg.clientId);
  }
}


routines {

[__null] mace::string generateContextName( const mace::string& contextTypeName, const uint32_t& contextId ) {
  std::ostringstream oss;
  oss<< contextTypeName << "[" << contextId << "]";
  return oss.str();
}

[__null] mace::map<uint32_t, uint64_t> generateRandomJoinTime( const uint64_t& day_start, const uint64_t& day_end, const mace::vector<uint32_t>& clientIds ) {
  ADD_SELECTORS("MemcachedClient");
  mace::map<uint32_t, uint64_t> join_times;

  std::default_random_engine generator(mace::getmtime());
  std::normal_distribution<double> distribution(DAY_JOIN,DAY_ERROR);
  for( uint32_t i=0; i<clientIds.size(); i++ ) {
    const uint32_t clientId = clientIds[i];
    double d_join_time = distribution(generator);
    if( d_join_time < 0 ) {
      while( d_join_time < 0 ) d_join_time += 1;
    } else if( d_join_time > 1 ) {
      while( d_join_time > 1 ) d_join_time -= 1;
    }

    if( d_join_time > 0.5 ) d_join_time -= 0.5;

    uint64_t join_time = (uint64_t) ( DAY_PERIOD*d_join_time + day_start );
    ASSERT( join_time >= day_start && join_time < day_end );

    join_times[clientId] = join_time;
  } 

  mace::map<uint32_t, uint64_t>::const_iterator jtIter = join_times.begin();
  for(; jtIter != join_times.end(); jtIter ++) {
    maceout<< "Client("<< jtIter->first <<") join_time = " << jtIter->second << Log::endl;
  }

  return join_times;
}

[__null] mace::map<uint32_t, uint64_t> generateRandomLeaveTime( const uint64_t& day_start, const uint64_t& day_end, const mace::vector<uint32_t>& clientIds ) {
  ADD_SELECTORS("MemcachedClient");
  mace::map<uint32_t, uint64_t> leave_times;

  std::default_random_engine generator(mace::getmtime());
  std::normal_distribution<double> distribution(DAY_LEAVE, DAY_ERROR);
  for( uint32_t i=0; i<clientIds.size(); i++ ) {
    const uint32_t clientId = clientIds[i];
    double d_leave_time = distribution(generator);
    if( d_leave_time < 0 ) {
      while( d_leave_time < 0 ) d_leave_time += 1;
    } else if( d_leave_time > 1 ) {
      while( d_leave_time > 1 ) d_leave_time -= 1;
    }

    if( d_leave_time < 0.5 ) d_leave_time += 0.5;

    uint64_t leave_time = (uint64_t) ( DAY_PERIOD*d_leave_time + day_start );
    ASSERT( leave_time > day_start && leave_time <= day_end );

    leave_times[clientId] = leave_time;
  }

  mace::map<uint32_t, uint64_t>::const_iterator ltIter = leave_times.begin();
  for(; ltIter != leave_times.end(); ltIter ++) {
    maceout<< "Client("<< ltIter->first <<") leave_time = " << ltIter->second << Log::endl;
  }

  return leave_times;
}

}



