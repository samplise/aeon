//#include <random>

#include "m_map.h"
#include "marray.h"
#include "MaceTypes.h" 
#include "RandomUtil.h"

service ElasticPiazzaAppServer;

provides Null;

services {
  Transport t;
}

constants {
  
}


constructor_parameters {
    uint32_t N_DEPARTMENTS = 1;
    uint32_t N_COURSES_PER_DEPARTMENT = 1;
    uint32_t N_STUDENTS_PER_COURSE = 32;

 
    uint64_t COMPUTATION_ROUND = 1;
    uint16_t ENANBLE_MIGRATION = 1;

    // migration
    uint32_t MIN_N_SERVERS = 4;
    uint32_t MID_N_SERVERS = 8;
    uint32_t MAX_N_SERVERS = 16;

    uint32_t MIGRATION_STAGE1_THRESHOLD = 4;
    uint32_t MIGRATION_STAGE2_THRESHOLD = 8;

    uint32_t OUTPUT_COUNT = 100;
}

typedefs {

}

#minclude "ElasticPiazzaAppMessages.mi"

auto_types {
  Coordinate __attribute((comparable(equals=default; lessthan=default))) {
    int16_t x;
    int16_t y;
  }

  PlayerInfo __attribute((comparable(equals=default; lessthan=default))) {
    Coordinate coord;
    uint16_t playerDirection;
  }
}
 
state_variables {
  context University {
    mace::set<uint32_t> d_ids;
    uint64_t msg_count = 0;
  }
  
  context Department<uint32_t x>{
    uint32_t d_id;
    
    uint64_t msg_count;
    mace::set<uint32_t> c_ids;
  }

  context Course<uint32_t x> {
    uint32_t d_id;
    uint32_t c_id;
    uint64_t msg_count;
    mace::set<uint32_t> s_ids;
  }

  context Student<uint32_t x> {
    uint32_t s_id;
    mace::set<uint32_t> register_cids;
    uint64_t msg_count;
  }

  context Controller {
    mace::map<uint32_t, uint32_t> department_server_map;
    uint32_t current_n_servers;
    
    mace::map<MaceKey, uint32_t> clientNumberMap;
  }
}

transitions {
  downcall maceInit()  {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    maceout << "Start PiazzaAppServer!" << Log::endl;
    srand( mace::getmtime() );
    
    createNewOwnership("globalContext", "University");
    createNewOwnership("globalContext", "Controller");

    async_initUniversity();
    async_initController();
  }

  async [Controller] initController() {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    maceout << "To initialize Controller!" << Log::endl;

    for( uint32_t i=1; i<=N_DEPARTMENTS; i++ ){
      department_server_map[i] = (i-1) % MIN_N_SERVERS + 1;
    }

    current_n_servers = MIN_N_SERVERS;
  }

  async [University] initUniversity() {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    maceout << "To initialize University!" << Log::endl;
    msg_count = 0;

    uint32_t shared_max_did = (uint32_t)( N_DEPARTMENTS * D_SHARED_PERCENT );

    for( uint32_t i=1; i<=N_DEPARTMENTS; i++ ) {
      uint32_t d_id = i;
      d_ids.insert(d_id);

      mace::string d_name = generateContextName("Department", d_id);
      createNewOwnership("University", d_name);

      if( i<shared_max_did ) {
        async_initDepartment(d_id, true);
      } else {
        async_initDepartment(d_id, false);
      }
    }
  }

  async [Department<did>] initDepartment(const uint32_t& did, const bool& d_share_student_flag ) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    maceout << "To initialize Department["<< did <<"] with shared_student_flag=" << (uint16_t)d_share_student_flag << Log::endl;
    d_id = did;
    msg_count = 0;


    mace::string d_name = generateContextName("Department", d_id);
    uint32_t shared_max_cid = (uint32_t)(N_COURSES_PER_DEPARTMENT * C_SHARED_PERCENT);
    mace::set<uint32_t> share_cids;
    uint32_t last_cid = 0;
    ASSERT(N_COURSES_PER_DEPARTMENT > 1);
    for( uint32_t i=1; i<=N_COURSES_PER_DEPARTMENT; i++ ) {
      uint32_t c_id = getCourseID(did, i);
      c_ids.insert(c_id);

      mace::string c_name = generateContextName("Course", c_id);
      createNewOwnership(d_name, c_name);

      if( i< shared_max_cid ) {
        share_cids.insert(c_id);
      }

      if( i == N_COURSES_PER_DEPARTMENT-1 ) {
        last_cid = c_id;
      }
    }  

    maceout << "Department["<< d_id <<"]: shared_cids=" << share_cids << Log::endl;

    for( mace::set<uint32_t>::iterator iter = c_ids.begin(); iter!=c_ids.end(); iter++ ) {
      if( last_cid == *iter ){
        async_initCourse( *iter, d_id, share_cids, false, d_share_student_flag );
      } else if( iter == c_ids.begin() ){
        async_initCourse( *iter, d_id, share_cids, true, d_share_student_flag );
      } else {
        async_initCourse( *iter, d_id, share_cids, false, false );
      }
    }
  }

  async [Course<cid>] initCourse(const uint32_t& cid, const uint32_t& did, const mace::set<uint32_t>& share_cids, const bool& c_share_student_flag, const bool& d_share_student_flag){
    ADD_SELECTORS("ElasticPiazzaAppServer");
    d_id = did;
    c_id = cid;
    maceout << "To initialize Department["<< d_id <<"]Course["<< c_id <<"] with d_share_student_flag " << (uint16_t)d_share_student_flag << " share_cids="<< share_cids <<Log::endl;

    msg_count = 0;
    
    mace::set<uint32_t> empty_cids;
    mace::string c_name = generateContextName("Course", c_id);
    for( uint32_t i=1; i<=N_STUDENTS_PER_COURSE; i++ ) {
      uint32_t s_id = getStudentID(cid, i);
      s_ids.insert(s_id);

      mace::string s_name = generateContextName("Student", s_id);
      createNewOwnership(c_name, s_name);

      if( i == 0 && share_cids.count(c_id) > 0 && c_share_student_flag ) {
        async_initStudent(s_id, c_id, share_cids);
      } else {
        async_initStudent(s_id, c_id, empty_cids);
      }
    }

    if( d_share_student_flag && s_ids.count(D_SHARE_S_ID) == 0 ) {
      s_ids.insert(D_SHARE_S_ID);
      mace::string s_name = generateContextName("Student", D_SHARE_S_ID);
      createNewOwnership(c_name, s_name);
      async_registerCourse(D_SHARE_S_ID, c_id);
    }

    maceout << "Department["<< d_id <<"]Course["<< c_id <<"] registerred s_ids=" << s_ids << Log::endl;
  }

  async [Course<cid>] registerStudent(const uint32_t& cid, const uint32_t& sid){
    ADD_SELECTORS("ElasticPiazzaAppServer");
    maceout << "Student["<< sid <<"] tries to register Course["<< cid <<"]!" << Log::endl;
    if( s_ids.count(sid) == 0 ){
      s_ids.insert(sid);
      mace::string c_name = generateContextName("Course", cid);
      mace::string s_name = generateContextName("Student", sid);
      createNewOwnership(c_name, s_name);
      maceout << "Course["<< cid <<"] register student " << sid << Log::endl;
    }
  }

  async [Student<sid>] registerCourse(const uint32_t& sid, const uint32_t& cid) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    if( register_cids.count(cid) == 0 ) {
      register_cids.insert(cid);
      maceout << "Student["<< sid <<"] register course " << cid << Log::endl;
    }
  }

  async [Student<sid>] initStudent(const uint32_t& sid, const uint32_t& cid, mace::set<uint32_t> const& to_register_cids) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    s_id = sid;
    maceout << "To initialize Student["<< s_id <<"] cid="<< cid <<" to_register_cids=" << to_register_cids << Log::endl;
    msg_count = 0;
    
    if( register_cids.count(cid) == 0 ) {
      register_cids.insert(cid);
    }

    for( mace::set<uint32_t>::const_iterator iter=to_register_cids.begin(); iter!=to_register_cids.end(); iter++ ) {
      if( register_cids.count(*iter) > 0 ) {
        continue;
      }
      maceout << "Student["<< s_id <<"] will register Course["<< *iter <<"]!" << Log::endl;
      async_registerStudent(*iter, s_id);
    }
    sleep(1);
  } 

  upcall deliver(const MaceKey& src, const MaceKey& dest, const ConnectionRequest& msg ) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    std::ostringstream oss;
    oss << src <<"["<<msg.clientId<<"]";

    MaceAddr commAddr = getExternalCommContextAddr( src, oss.str() );
    maceout << "commAddr=" << commAddr << Log::endl;
    MaceKey commKey( ipv4, commAddr );
    downcall_route( src, ConnectionSetup(commKey, msg.clientId) );
    maceout<< "Assign external communication node("<< commKey <<") to client("<< msg.clientId <<") from " << src << Log::endl;
  }

  upcall [Department<msg.did>] deliver(const MaceKey& src, const MaceKey& dest, const DepartmentRequest& msg) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    msg_count ++;
    downcall_route(src, Response(msg.clientId) );    
  }

  upcall [Course<msg.cid>] deliver(const MaceKey& src, const MaceKey& dest, const CourseRequest& msg) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    msg_count ++;
    downcall_route(src, Response(msg.clientId) );    
  }

  upcall [Student<msg.sid>] deliver(const MaceKey& src, const MaceKey& dest, const StudentRequest& msg) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    msg_count ++;
    
    for( uint64_t i=0; i<COMPUTATION_ROUND; i++ ){
      uint64_t k = 0;
      for( uint64_t j=0; j<100000; j++ ){
        k++;
      }
    }

    if( msg_count % OUTPUT_COUNT == 0 ){
      maceout << "Student["<< msg.sid <<"] msg_count = " << msg_count << Log::endl;
    }

    downcall_route(src, Response(msg.clientId) );    
  }

  upcall [Controller] deliver(const MaceKey& src, const MaceKey& dest, const ClientNumberReport& msg) {
  
    ADD_SELECTORS("ElasticPiazzaAppServer");
    clientNumberMap[src] = msg.client_number;
    uint32_t active_client_number = 0;
    mace::map<MaceKey, uint32_t>::const_iterator iter = clientNumberMap.begin();
    for(; iter != clientNumberMap.end(); iter++) {
      active_client_number += iter->second;
    }
    maceout<< "Node("<< src <<")'s new active clients="<< msg.client_number <<" total="<< active_client_number << Log::endl;
    if( ENANBLE_MIGRATION == 1 ) {
      if( current_n_servers == MIN_N_SERVERS && active_client_number >= MIGRATION_STAGE1_THRESHOLD ) {
        maceout<< "Scaleup #1. From "<< current_n_servers <<" to "<< MID_N_SERVERS <<" Active clients=" << active_client_number << Log::endl;
        
        scale_up(1, department_server_map);
        current_n_servers = MID_N_SERVERS;
        maceout<< "Server placement: " << department_server_map << Log::endl;
      } else if( current_n_servers == MID_N_SERVERS && active_client_number >= MIGRATION_STAGE2_THRESHOLD ) {
        maceout<< "Scaleup #2. From "<< current_n_servers <<" to "<< MAX_N_SERVERS <<" Active clients=" << active_client_number << Log::endl;
        
        scale_up(2, department_server_map);
        current_n_servers = MAX_N_SERVERS;
        maceout<< "Server placement: " << department_server_map << Log::endl;
      } else if( current_n_servers == MAX_N_SERVERS && active_client_number < MIGRATION_STAGE2_THRESHOLD ) {
        maceout<< "Scale down #2. From "<< current_n_servers <<" to "<< MID_N_SERVERS <<" Active clients=" << active_client_number << Log::endl;
        
        scale_down(2, department_server_map);
        current_n_servers = MID_N_SERVERS;
        maceout<< "Server placement: " << department_server_map << Log::endl;
      } else if( current_n_servers == MID_N_SERVERS && active_client_number < MIGRATION_STAGE1_THRESHOLD ) {
        maceout<< "Scale down #1. From "<< current_n_servers <<" to "<< MIN_N_SERVERS <<" Active clients=" << active_client_number << Log::endl;
        
        scale_down(1, department_server_map);
        current_n_servers = MIN_N_SERVERS;
        maceout<< "Server placement: " << department_server_map << Log::endl;
      }
    }
  
  }
}

routines {

  [__null] mace::string generateContextName( const mace::string& ctxName, const uint32_t& id) {
    std::ostringstream oss;
    oss << ctxName <<"["<<id<<"]";
    return oss.str();
  }

  [__null] uint32_t getCourseID( const uint32_t& did, const uint32_t& citer ) {
    return ( (did-1)*N_COURSES_PER_DEPARTMENT + citer );  
  }

  [__null] uint32_t getStudentID( const uint32_t& cid, const uint32_t& siter ) {
    return ( (cid-1)*N_STUDENTS_PER_COURSE + siter );  
  }

  [__null] void scale_up( const uint32_t& round, mace::map<uint32_t, uint32_t>& d_server_map ) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    mace::map<uint32_t, uint32_t> d_server_map_copy = d_server_map;

    uint32_t adding_n_servers = 0;
    if( round == 1 ) {
      adding_n_servers = MIN_N_SERVERS;
    } else if( round == 2 ){
      adding_n_servers = MID_N_SERVERS;
    }

    for( mace::map<uint32_t, uint32_t>::iterator iter=d_server_map_copy.begin(); iter!=d_server_map_copy.end(); iter++ ) {
      if( round == 1 ) {
        if( iter->first > N_DEPARTMENTS/2 && iter->second <= MIN_N_SERVERS ) {
          maceout << "Scale up department["<< iter->first<<"] from server("<< iter->second <<") for round " << round << Log::endl;
          d_server_map[ iter->first ] = iter->second + MID_N_SERVERS;

          for( uint32_t i=1; i<=N_COURSES_PER_DEPARTMENT; i++ ){
            uint32_t cid = getCourseID( iter->first, i );
            // migrateCourse(cid, round, "scaleup");
            for( uint32_t j=1; j<=N_STUDENTS_PER_COURSE; j++ ){
              uint32_t sid = getStudentID( cid, j );
              migrateStudent(sid, round, "scaleup");
            }
          }
        }
      } else if( round == 2 ) {
        if( iter->second != iter->first ) {
          maceout << "Scale up department["<< iter->first<<"] from server("<< iter->second <<") for round " << round << Log::endl;
          d_server_map[ iter->first ] = iter->first;

          for( uint32_t i=1; i<=N_COURSES_PER_DEPARTMENT; i++ ){
            uint32_t cid = getCourseID( iter->first, i );
            // migrateCourse(cid, round, "scaleup");
            for( uint32_t j=1; j<=N_STUDENTS_PER_COURSE; j++ ){
              uint32_t sid = getStudentID( cid, j );
              migrateStudent(sid, round, "scaleup");
            }
          }
        }
      }

    }
    
  }

  [__null] void scale_down( const uint32_t& round, mace::map<uint32_t, uint32_t>& d_server_map ) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    mace::map<uint32_t, uint32_t> d_server_map_copy = d_server_map;

    for( mace::map<uint32_t, uint32_t>::iterator iter=d_server_map_copy.begin(); iter!=d_server_map_copy.end(); iter++ ) {
      if( round == 2 ) {
        maceout << "Department["<< iter->first <<"] is on server("<< iter->second <<")." << Log::endl;
        if( (iter->first>MIN_N_SERVERS && iter->first <= MID_N_SERVERS && iter->second > MIN_N_SERVERS) || 
            (iter->first>MID_N_SERVERS+MIN_N_SERVERS && iter->second == iter->first )  ){
          maceout << "Scale down department["<< iter->first<<"] from server("<< iter->second <<") for round " << round << Log::endl;
          //migrateDepartment(iter->first, round, "scaledown");
          d_server_map[ iter->first ] = iter->second - MIN_N_SERVERS;

          for( uint32_t i=1; i<=N_COURSES_PER_DEPARTMENT; i++ ){
            uint32_t cid = getCourseID( iter->first, i );
            //migrateCourse(cid, round, "scaledown");
            for( uint32_t j=1; j<=N_STUDENTS_PER_COURSE; j++ ){
              uint32_t sid = getStudentID( cid, j );
              migrateStudent(sid, round, "scaledown");
            }
          }
        }
      } else if( round == 1 ) {
        if( iter->first>MID_N_SERVERS && iter->second > MID_N_SERVERS ){
          maceout << "Scale down department["<< iter->first<<"] from server("<< iter->second <<") for round " << round << Log::endl;
          //migrateDepartment(iter->first, round, "scaledown");
          d_server_map[ iter->first ] = iter->second - MID_N_SERVERS;

          for( uint32_t i=1; i<=N_COURSES_PER_DEPARTMENT; i++ ){
            uint32_t cid = getCourseID( iter->first, i );
            //migrateCourse(cid, round, "scaledown");
            for( uint32_t j=1; j<=N_STUDENTS_PER_COURSE; j++ ){
              uint32_t sid = getStudentID( cid, j );
              migrateStudent(sid, round, "scaledown");
            }
          }
        }
      }
    }
  }
  
  [__null] void migrateDepartment( const uint32_t& did, const uint32_t& round, const mace::string& scale_str ) {
    std::ostringstream oss;
    oss << "migrate_"<< scale_str << "D" << did << "_R" << round;
    migrateContext( oss.str() );  
  }

  [__null] void migrateCourse( const uint32_t& cid, const uint32_t& round, const mace::string& scale_str ) {
    std::ostringstream oss;
    oss << "migrate_"<< scale_str << "_C" << cid << "_R" << round;
    migrateContext( oss.str() );  
  }

  [__null] void migrateStudent( const uint32_t& sid, const uint32_t& round, const mace::string& scale_str ) {
    ADD_SELECTORS("ElasticPiazzaAppServer");
    std::ostringstream oss;
    oss << "migrate_"<< scale_str << "_S" << sid <<"_R" << round;
    maceout << "To migrate " << oss.str() << Log::endl;
    migrateContext( oss.str() );  
  }

}

