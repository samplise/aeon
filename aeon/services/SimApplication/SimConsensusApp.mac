/* 
 * SimConsensusApp.mac : part of the Mace toolkit for building distributed systems
 * 
 * Copyright (c) 2011, Charles Killian, James W. Anderson
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of the contributors, nor their associated universities 
 *      or organizations may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ----END-OF-LEGAL-STUFF---- */
service SimConsensusApp;

provides SimApplication;

trace = med;

services {
  Consensus c;
}

states {
  waiting;
  proposed;
  chosen;
}

constants {
  #include "mstring.h"
  mace::string SIM_KEY = "SIMAPP";
}

constructor_parameters {
  int numToPropose = 1;
}

method_remappings {
  uses {
    downcall_propose(const mace::string&, const int& -> const mace::string&);
  }
  implements {
    upcalls {
      notifyProposalChosen(const mace::string&, const int& <- const mace::string&);
    }
  }
}

state_variables {
  int chosenValue = -1;
  timer initiatePropose __attribute((simWeight(40)));
  timer retry;
}

transitions {

  downcall (state == init) maceInit() {
    if(upcall_getNodeNumber() < numToPropose) {
      state = waiting;
      initiatePropose.schedule(1);
    } else {
      state = proposed;
    }
//    return "maceInit";
  }

  scheduler (state == waiting) initiatePropose() {
    downcall_propose(SIM_KEY, upcall_getNodeNumber());
    retry.schedule(5000000);
    state = proposed;
//    return "propose";
  }

  upcall notifyProposalChosen(key, value) {
    ASSERT(key == SIM_KEY);
    ASSERT(chosenValue == -1);
    chosenValue = value;
  }
  
  aspect<chosenValue> (oldvalue == -1/* && chosenValue != -1*/) transitionToChosen(oldvalue) {
    state = chosen;
    retry.cancel();
  }

  scheduler (state == proposed) retry() {
    downcall_propose(SIM_KEY, upcall_getNodeNumber());
    retry.schedule(5000000);
  }

  upcall void notifyProposalNotChosen(mace::string const & key, mace::string const & value, registration_uid_t rid) { }
}

properties {
  safety {
    chosenConsistency : \forall n \in \nodes: n.state = chosen \implies n.chosenValue \neq -1;
    oneValueChosen : \forall n \in \nodes: {n.chosenValue = -1 \or \forall m \in \nodes : {m.chosenValue = -1 \or m.chosenValue = n.chosenValue}};
  }
  liveness {
    allNodesPastWaiting : \forall n \in \nodes : n.state = proposed \or n.state = chosen;
    someValueChosen : \exists n \in \nodes : n.state = chosen;
  }
}

