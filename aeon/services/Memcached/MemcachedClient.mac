#include <random>

#define get16bits(d) ((((uint32_t)(((const uint8_t *)(d))[1])) << 8)\
                       +(uint32_t)(((const uint8_t *)(d))[0]) )

service MemcachedClient;

provides Null;

time = MaceTime;

constructor_parameters {
  NodeSet DHT_NODES = NodeSet(); /* Should be only one node */

  NodeSet DATABASE_NODE = NodeSet();

  uint32_t SERVER_NUMBER = 4;
  uint32_t N_TABLES_PER_SERVER = 8;
  uint32_t TABLE_NUMBER = 8;
  
  uint64_t PAIRS_NUMBER = 40000000;
  uint64_t PAIRS_NUMBER_PER_CLIENT = 40000000; 
  uint32_t CLIENT_NUMBER = 32;

  uint64_t DAY_PERIOD = 600;
  uint32_t DAY_NUMBER = 100; 

  double DAY_JOIN = 0.2;
  double DAY_LEAVE = 0.5;
  double DAY_ERROR = 0.15;

  uint32_t KEY_BYTES = 10;
  uint32_t POINTS_PER_SERVER = 5;

  uint64_t OUTPUT_COUNT = 500;

  uint32_t WRITE_PERCENT = 5;
  
  uint64_t WARMUP_TIME_PERIOD = 300;
}

typedefs {
  typedef mace::vector< mace::pair<mace::string, mace::string> > Pairs;
}

services {
  Transport t;
}

messages {
  ReadRequest {
    uint32_t clientId;
    mace::string key;
    uint32_t tableId;
  }

  ReadReply {
    uint32_t clientId;
    mace::string key;
    mace::string value;
    bool isCacheMiss;
  }

  WriteRequest {
    uint32_t clientId;
    mace::string key;
    mace::string value;
    uint32_t tableId;
  }

  WriteReply {
    uint32_t clientId;
    mace::string key;
    bool isCacheMiss;
  }

  ReadDatabase {
    uint32_t clientId;
    mace::string key;
    MaceKey clientAddr;
    uint32_t tableId;
  }

  WriteDatabase {
    mace::string key;
    mace::string value;
    uint32_t tableId;
  }

  ReadDatabaseReply {
    uint32_t clientId;
    mace::string key;
    mace::string value;
    MaceKey clientAddr;
    uint32_t tableId;
  }

  ReportClientNumber {
    uint32_t client_number;
  }

}

auto_types {
  ContinuumItem __attribute((comparable(equals=default; lessthan=default))) {
    uint32_t index;
    uint32_t value;
  }

  Ketama __attribute((comparable(equals=default; lessthan=default))) {
    uint32_t continuum_count;
    uint32_t continuum_points_counter;
    mace::vector<ContinuumItem> continuum;
  }

  ServerStruct __attribute((comparable(equals=default; lessthan=default))) {
    MaceKey addr;
    uint32_t port;
    mace::string host_name;
    uint64_t request_count;
  }
}

state_variables {
  context Controller {
    mace::map<uint32_t, uint64_t> join_times;
    mace::map<uint32_t, uint64_t> leave_times;

    uint64_t current_day_start;
    uint64_t current_day_end;
    uint64_t current_day_mid;

    uint64_t exact_start_time;

    uint64_t sleep_time_period;

    uint32_t current_day;

    uint32_t current_client_number;

    MaceKey databaseAddr;
  }
  
  context Client<uint32_t clientId> {
    Ketama ketama;
    mace::vector<ServerStruct> servers;
    Pairs load_pairs;
    bool isActive;

    uint64_t request_count;
    uint64_t read_request_count;
    uint64_t write_request_count;
    uint64_t cache_miss_count;
    uint64_t cache_hit_count;

    uint64_t start_pair_number;
    uint64_t end_pair_number;

    uint64_t last_send_timestamp;
    uint64_t total_response_time;
  }
}

local_address {
  return downcall_localAddress();
}


transitions {
  downcall maceInit() {
    srand( mace::getmtime() );
    ASSERT( DHT_NODES.size() > 0 && DHT_NODES.size() == SERVER_NUMBER );
    ASSERT( DATABASE_NODE.size() == 1);
    mace::vector<ServerStruct> servers = generateServers( DHT_NODES.size() );
    mace::set< mace::pair<mace::string, mace::string> > ownerships;  
    for( uint32_t i=0; i<CLIENT_NUMBER; i++) {
      std::ostringstream oss;
      oss<< "Client[" << i << "]";

      mace::pair<mace::string, mace::string> ownership("globalContext", oss.str() );
      ownerships.insert(ownership);
      async_initClient(i, servers);
      async_setActive(i, true);
    }
    mace::pair<mace::string, mace::string> ownership("globalContext", "Controller");
    ownerships.insert(ownership);

    addNewOwnerships(ownerships);
    async_initController( *(DATABASE_NODE.begin()) );
  }

  async [Controller] initController( const MaceKey& addr ) {
    ADD_SELECTORS("MemcachedClient");
    maceout<<"Initializing Controller!" << Log::endl;
    current_client_number = 0;
    databaseAddr = addr;
    
    async_startController();    
  }

  async [Controller] startController() {
    ADD_SELECTORS("MemcachedClient");
    sleep(WARMUP_TIME_PERIOD);
    current_day_start = 2;
    current_day_end = current_day_start + DAY_PERIOD;
    current_day_mid = (current_day_start+current_day_end) / 2;

    mace::vector<uint32_t> clientIds;
    for(uint32_t i=1; i< CLIENT_NUMBER; i++) { 
      clientIds.push_back(i);
      async_setActive(i, false);
    }
    current_client_number = 1;
    join_times = generateRandomJoinTime( current_day_start, current_day_end, clientIds );
    leave_times = generateRandomLeaveTime( current_day_start, current_day_end, clientIds );

    exact_start_time = mace::getmtime();
    sleep_time_period = 0;
    current_day = 1;

    async_launchTimeScheduler();
  }

  async [Controller] launchTimeScheduler() {
    ADD_SELECTORS("MemcachedClient");
    maceout<<"sleep time=" << sleep_time_period << Log::endl;
    sleep(sleep_time_period);
    uint64_t exact_current_time = mace::getmtime();
    

    uint64_t current_time = (uint64_t) (exact_current_time - exact_start_time) / 1000000;
    
    mace::vector<uint64_t> toRemoved;
    uint64_t next_join_time = 0;
    uint64_t next_leave_time = 0;
    if( current_time <= current_day_mid ) {
      mace::map<uint32_t, uint64_t>::iterator iter = join_times.begin();
      for(; iter != join_times.end(); iter++ ){
        if( current_time >= iter->second ) {
          async_setActive( iter->first, true);
          current_client_number ++;
          toRemoved.push_back(iter->first);
        } else {
          if( next_join_time == 0 ) {
            next_join_time = iter->second;
          } else if( next_join_time > iter->second ) {
            next_join_time = iter->second;
          }
        }
      }
      for( uint64_t i=0; i<toRemoved.size(); i++ ) {
        join_times.erase( toRemoved[i] );
      }

    } else if ( current_time > current_day_mid ) {
      mace::map<uint32_t, uint64_t>::iterator iter = leave_times.begin();
      for(; iter != leave_times.end(); iter++ ) {
        if( current_time >= iter->second ) {
          async_setActive( iter->first, false);
          current_client_number --;
          toRemoved.push_back( iter->first );
        } else {
          if( next_leave_time == 0 ) {
            next_leave_time = iter->second;
          } else if( next_leave_time > iter->second ) {
            next_leave_time = iter->second;
          }
        } 
      }

      for( uint64_t i=0; i<toRemoved.size(); i++ ) {
        leave_times.erase( toRemoved[i] );
      }
    }

    maceout<<"next_join_time=" << next_join_time<<" next_leave_time="<< next_leave_time << Log::endl;
    if( next_join_time != 0 ) {
      sleep_time_period = next_join_time - current_time;
      async_launchTimeScheduler();
    } else if( next_leave_time != 0 ) {
      sleep_time_period = next_leave_time - current_time;
      async_launchTimeScheduler();
    } else {
      if( join_times.empty() && !leave_times.empty() ) {
        mace::map<uint32_t, uint64_t>::iterator iter = leave_times.begin();
        for(; iter != leave_times.end(); iter++ ) {
          if( next_leave_time == 0 ) {
            next_leave_time = iter->second;
          } else if( next_leave_time > iter->second ) {
            next_leave_time = iter->second;
          }
        }
        sleep_time_period = next_leave_time - current_time;
        async_launchTimeScheduler();
      } else if( join_times.empty() && leave_times.empty() ) {
        current_day ++;
        if( current_day <= DAY_NUMBER) {
          current_day_start = 2 + current_day_end;
          current_day_end = current_day_start + DAY_PERIOD;
          current_day_mid = (current_day_start+current_day_end) / 2;

          mace::vector<uint32_t> clientIds;
          for(uint32_t i=1; i< CLIENT_NUMBER; i++) clientIds.push_back(i);
          join_times = generateRandomJoinTime( current_day_start, current_day_end, clientIds );
          leave_times = generateRandomLeaveTime( current_day_start, current_day_end, clientIds );

          mace::map<uint32_t, uint64_t>::iterator iter = join_times.begin();
          for(; iter != join_times.end(); iter++ ) {
            if( next_join_time == 0 ) {
              next_join_time = iter->second;
            } else if( next_join_time > iter->second ) {
              next_join_time = iter->second;
            }
          }
          sleep_time_period = next_join_time - current_time;
          async_launchTimeScheduler();
        }
      }
    }
    maceout<< "Current active client number: " << current_client_number << Log::endl;
    downcall_route( databaseAddr, ReportClientNumber(current_client_number) );
  }

  async [Client<clientId>] initClient( uint32_t const& clientId, mace::vector<ServerStruct> const& new_servers ) {
    ADD_SELECTORS("MemcachedClient");
    servers = new_servers;
        
    request_count = 0;
    read_request_count = 0;
    write_request_count = 0;

    total_response_time = 0;
    last_send_timestamp = 0;

    cache_miss_count = 0;
    cache_hit_count = 0;

    isActive = false;
    if( PAIRS_NUMBER == PAIRS_NUMBER_PER_CLIENT ) {
      start_pair_number = 1;
      end_pair_number = PAIRS_NUMBER;
    } else {
      randomGenerateKeyRange(start_pair_number, end_pair_number);
    }
    maceout << "To initialize client(" << clientId <<") start_pair_number="<< start_pair_number<< " end_pair_number="<< end_pair_number << Log::endl;
  }

  async [Client<clientId>] launchRequest( uint32_t const& clientId ) {
    ADD_SELECTORS("MemcachedClient");
    
    last_send_timestamp = mace::getmtime();
    
    const mace::string key_str = generateRandomKey(start_pair_number, end_pair_number);
    const uint32_t tId = get_bucket(key_str);
    const uint32_t serverId = (uint32_t) (tId / N_TABLES_PER_SERVER);
    const uint32_t server_tId = tId % N_TABLES_PER_SERVER; 

    uint32_t request_percent =  (uint32_t) rand()%100;
    if( request_percent < WRITE_PERCENT ) {
      write_request_count ++;
      mace::string value_str = getDefaultValue();
      downcall_route( servers[serverId].addr, WriteRequest(clientId, key_str, value_str, server_tId) );
    } else {
      read_request_count ++;
      downcall_route( servers[serverId].addr, ReadRequest(clientId, key_str, server_tId) );
    }
  }

  async [Client<clientId>] setActive( uint32_t const& clientId, bool const& active ) {
    ADD_SELECTORS("MemcachedClient");
    if( active ) {
      maceout<< "Set Client("<< clientId <<") active!" << Log::endl;
    } else {
      maceout<< "Set Client("<< clientId <<") inactive" << Log::endl;
    }

    isActive = active;
    if( isActive ) {
      async_launchRequest(clientId);
    }
  }

  upcall [Client<msg.clientId>] deliver(const MaceKey& src, const MaceKey& dest, const ReadReply& msg) {
    ADD_SELECTORS("MemcachedClient");
    request_count ++;
    if( msg.isCacheMiss ) {
      cache_miss_count ++;
    } else {
      cache_hit_count ++;
    }

    uint64_t recv_timestamp = mace::getmtime();
    uint64_t response_time = recv_timestamp - last_send_timestamp;
    total_response_time += response_time;

    if( request_count % OUTPUT_COUNT == 0 ) {
      uint64_t avg_response_time = (uint64_t) (total_response_time / OUTPUT_COUNT);
      maceout<< "Client("<< msg.clientId <<"): requestCount=" << request_count << " cacheMissCount=" << cache_miss_count << " avg_response_time=" << avg_response_time <<" read_request_count=" << read_request_count <<" write_request_count="<< write_request_count<< Log::endl;

      read_request_count = 0;
      write_request_count = 0;
      cache_miss_count = 0;
      cache_hit_count = 0;
      total_response_time = 0;
    }
    if( isActive ) {
      last_send_timestamp = mace::getmtime();
    
      const mace::string key_str = generateRandomKey(start_pair_number, end_pair_number);
      const uint32_t tId = get_bucket(key_str);
      const uint32_t serverId = (uint32_t) (tId / N_TABLES_PER_SERVER);
      const uint32_t server_tId = tId % N_TABLES_PER_SERVER; 

      uint32_t request_percent =  (uint32_t) rand()%100;
      if( request_percent < WRITE_PERCENT ) {
        write_request_count ++;
        mace::string value_str = getDefaultValue();
        downcall_route( servers[serverId].addr, WriteRequest(msg.clientId, key_str, value_str, server_tId) );
      } else {
        read_request_count ++;
        downcall_route( servers[serverId].addr, ReadRequest(msg.clientId, key_str, server_tId) );
      }
    }
  }

  upcall [Client<msg.clientId>] deliver(const MaceKey& src, const MaceKey& dest, const WriteReply& msg) {
    ADD_SELECTORS("MemcachedClient");
    request_count ++;
    if( msg.isCacheMiss ) {
      cache_miss_count ++;
    } else {
      cache_hit_count ++;
    }

    uint64_t recv_timestamp = mace::getmtime();
    uint64_t response_time = recv_timestamp - last_send_timestamp;
    total_response_time += response_time;

    if( request_count % OUTPUT_COUNT == 0 ) {
      uint64_t avg_response_time = (uint64_t) (total_response_time / OUTPUT_COUNT);
      maceout<< "Client("<< msg.clientId <<"): requestCount=" << request_count << " cacheMissCount=" << cache_miss_count << " avg_response_time=" << avg_response_time <<" read_request_count=" << read_request_count <<" write_request_count="<< write_request_count<< Log::endl;

      read_request_count = 0;
      write_request_count = 0;
      cache_miss_count = 0;
      cache_hit_count = 0;
      total_response_time = 0;
    }
    if( isActive ) {
      async_launchRequest( msg.clientId );
    }
  }

}


routines {

[__null] uint32_t get_bucket(const mace::string& key) {
    uint32_t len = key.length();
    char * cstr = new char [key.length()+1];
    strcpy(cstr, key.c_str());
    char * data = cstr;
    uint32_t hash = len, tmp;
    int rem;

    if (len == 0) {
      delete[] cstr;
      return 0;
    }

    rem = len & 3;
    len >>= 2;

    /* Main loop */
    for (; len > 0; len--) {
      hash  += get16bits (data);
      tmp    = (get16bits (data+2) << 11) ^ hash;
      hash   = (hash << 16) ^ tmp;
      data  += 2*sizeof (uint16_t);
      hash  += hash >> 11;
    }

    /* Handle end cases */
    switch (rem) {
      case 3: hash += get16bits (data);
              hash ^= hash << 16;
              hash ^= ((signed char)data[sizeof (uint16_t)]) << 18;
              hash += hash >> 11;
              break;
      case 2: hash += get16bits (data);
              hash ^= hash << 11;
              hash += hash >> 17;
              break;
      case 1: hash += (signed char)*data;
              hash ^= hash << 10;
              hash += hash >> 1;
    }

    /* Force "avalanching" of final 127 bits */
    hash ^= hash << 3;
    hash += hash >> 5;
    hash ^= hash << 4;
    hash += hash >> 17;
    hash ^= hash << 25;
    hash += hash >> 6;

    delete[] cstr;
    return hash % (TABLE_NUMBER);
  }

[__null] mace::string getDefaultValue() {
  mace::string str_value = "";
  mace::string seed_str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for(uint32_t i=0; i<19; i++) {
    str_value += seed_str;
  }
  return str_value;
}


[__null] Pairs load_create_data() {
  Pairs load_pairs;
  load_pairs.resize(PAIRS_NUMBER);

  static const char ALPHANUMERICS[] = "0123456789ABCDEFGHIJKLMNOPQRSTWXYZabcdefghijklmnopqrstuvwxyz";
  char value_str[1024];
  uint64_t cur_len = 0;
  uint32_t len = strlen(ALPHANUMERICS);
  while( cur_len + len < 1024 ) {
    sprintf( &value_str[cur_len], "%s", ALPHANUMERICS);
    cur_len += strlen(ALPHANUMERICS);
  }

  for( uint64_t i = 0; i<PAIRS_NUMBER; i ++) {
    char key_str[KEY_BYTES];
    sprintf(key_str, "Key-%d", (int)i);
    load_pairs[i].first = key_str;

    load_pairs[i].second = value_str;
  }

  return load_pairs;
}

[__null] uint32_t hashkit_one_at_a_time( mace::string const& key ) {
  uint32_t value = 0;
  uint32_t key_len = key.length();

  for(uint32_t i=0; i < key_len; i++) {
    uint32_t val = (uint32_t)key[i];
    value += val;
    value += (value << 10);
    value ^= (value >> 6);
  }

  value += (value << 3);
  value ^= (value >> 11);
  value += (value << 15);

  return value;
} 

[__null] uint32_t generate_hash_with_redistribution( mace::string const& key, const Ketama& ketama ) {
  if( DHT_NODES.size() == 1 ) {
    return 0;
  }

  uint32_t hash = hashkit_one_at_a_time(key);

  return dispatch_host(hash, ketama);
}

[__null] uint32_t dispatch_host( const uint32_t& hash, const Ketama& ketama ) {
  //uint32_t num= ketama.continuum_points_counter;
  uint32_t begin, left, end, right, middle; 
  begin = left = 0;
  end = right = ketama.continuum.size();

  while (left < right) {
    middle = left + (right - left) / 2;
    if ( ketama.continuum[middle].value < hash)
      left= middle + 1;
    else
      right= middle;
  }
  if (right == end)
      right= begin;

  return ketama.continuum[right].index;
}

[__null] void sort_continuums( mace::vector<ContinuumItem>& continuums) {
  qsort_continuums( continuums, 0, continuums.size()-1 );
}

[__null] void qsort_continuums( mace::vector<ContinuumItem>& continuums, const uint32_t begin, const uint32_t end) {
  ADD_SELECTORS("MemcachedClient");
  ASSERT( begin>=0 && end<continuums.size()  );
  if( begin >= end ) return;
  ContinuumItem comp_item = continuums[begin];

  uint32_t begin_iter = begin+1;
  uint32_t end_iter = end;
  while( begin_iter <= end_iter ) {
    while( continuums[begin_iter].value <= comp_item.value ) { 
      if( begin_iter<end ) {
        begin_iter ++;
      } else {
        break;
      }
    }
    while( continuums[end_iter].value > comp_item.value ) {
      if( end_iter > begin ) {
        end_iter --;
      } else {
        break;
      }
    }
    if( begin_iter >= end_iter ) break;

    ContinuumItem temp = continuums[begin_iter];
    continuums[begin_iter] = continuums[end_iter];
    continuums[end_iter] = temp;
    begin_iter ++;
    end_iter --;
  }

  uint32_t pos = begin_iter - 1;
  if( pos > 0 ) {
    continuums[begin] = continuums[pos];
    continuums[pos] = comp_item;
  }

  qsort_continuums( continuums, begin, pos );
  qsort_continuums( continuums, pos+1, end );

}

[__null] Ketama update_continuum( mace::vector<ServerStruct> const& new_servers ) {
  uint32_t continuum_index= 0;
  uint32_t pointer_counter= 0;
  uint32_t pointer_per_server= POINTS_PER_SERVER;
  uint32_t pointer_per_hash= 1;
  uint32_t live_servers= new_servers.size();

  Ketama ketama;
  
  uint32_t total_continuum_pointer = live_servers * pointer_per_server;
  ketama.continuum.resize(total_continuum_pointer);
  
  for (uint32_t host_index= 0; host_index < live_servers; ++host_index) {
    for (uint32_t pointer_index= 1; pointer_index <= pointer_per_server / pointer_per_hash; pointer_index++) {
      char sort_host[1025+1+32+1+32]= "";
      int sort_host_length;

      sort_host_length= snprintf(sort_host, sizeof(sort_host),
                                 "%s:%u-%u",
                                 new_servers[host_index].host_name.c_str(),
                                 new_servers[host_index].port,
                                 pointer_index - 1);
      
      const mace::string host_str = sort_host;
      uint32_t value= hashkit_one_at_a_time(host_str);
      ketama.continuum[continuum_index].index= host_index;
      ketama.continuum[continuum_index++].value= value;
    }

    pointer_counter+= pointer_per_server;
  }

  ketama.continuum_points_counter= pointer_counter;
  sort_continuums(ketama.continuum);

  return ketama;
}

[__null] mace::map<uint32_t, uint64_t> generateRandomJoinTime( const uint64_t& day_start, const uint64_t& day_end, const mace::vector<uint32_t>& clientIds ) {
  ADD_SELECTORS("MemcachedClient");
  mace::map<uint32_t, uint64_t> join_times;

  std::default_random_engine generator(mace::getmtime());
  std::normal_distribution<double> distribution(DAY_JOIN,DAY_ERROR);
  for( uint32_t i=0; i<clientIds.size(); i++ ) {
    const uint32_t clientId = clientIds[i];
    double d_join_time = distribution(generator);
    if( d_join_time < 0 ) {
      while( d_join_time < 0 ) d_join_time += 1;
    } else if( d_join_time > 1 ) {
      while( d_join_time > 1 ) d_join_time -= 1;
    }

    if( d_join_time > 0.5 ) d_join_time -= 0.5;

    uint64_t join_time = (uint64_t) ( DAY_PERIOD*d_join_time + day_start );
    ASSERT( join_time >= day_start && join_time < day_end );

    join_times[clientId] = join_time;
  } 

  mace::map<uint32_t, uint64_t>::const_iterator jtIter = join_times.begin();
  for(; jtIter != join_times.end(); jtIter ++) {
    maceout<< "Client("<< jtIter->first <<") join_time = " << jtIter->second << Log::endl;
  }

  return join_times;
}

[__null] mace::map<uint32_t, uint64_t> generateRandomLeaveTime( const uint64_t& day_start, const uint64_t& day_end, const mace::vector<uint32_t>& clientIds ) {
  ADD_SELECTORS("MemcachedClient");
  mace::map<uint32_t, uint64_t> leave_times;

  std::default_random_engine generator(mace::getmtime());
  std::normal_distribution<double> distribution(DAY_LEAVE, DAY_ERROR);
  for( uint32_t i=0; i<clientIds.size(); i++ ) {
    const uint32_t clientId = clientIds[i];
    double d_leave_time = distribution(generator);
    if( d_leave_time < 0 ) {
      while( d_leave_time < 0 ) d_leave_time += 1;
    } else if( d_leave_time > 1 ) {
      while( d_leave_time > 1 ) d_leave_time -= 1;
    }

    if( d_leave_time < 0.5 ) d_leave_time += 0.5;

    uint64_t leave_time = (uint64_t) ( DAY_PERIOD*d_leave_time + day_start );
    ASSERT( leave_time > day_start && leave_time <= day_end );

    leave_times[clientId] = leave_time;
  }

  mace::map<uint32_t, uint64_t>::const_iterator ltIter = leave_times.begin();
  for(; ltIter != leave_times.end(); ltIter ++) {
    maceout<< "Client("<< ltIter->first <<") leave_time = " << ltIter->second << Log::endl;
  }

  return leave_times;
}

[__null] mace::vector<ServerStruct> generateServers(const uint32_t I ) {
  ASSERT( I>0 && DHT_NODES.size() <= I );
  mace::vector<ServerStruct> servers;

  
  NodeSet::const_iterator nodeIter = DHT_NODES.begin();
  for( uint32_t i=0; nodeIter!=DHT_NODES.end() && i<I; nodeIter ++ ) {
    servers.push_back( ServerStruct( *nodeIter, 0, (*nodeIter).addressString(), 0 ) );
    i ++;
  }

  return servers;
}

[__null] mace::string generateRandomKey( const uint64_t start_pair_number, const uint64_t end_pair_number ) {
  ASSERT(end_pair_number >= start_pair_number);
  uint64_t uint_key;
  if( start_pair_number == end_pair_number ) {
    uint_key = start_pair_number;
  } else {
    uint64_t size = end_pair_number - start_pair_number;
    uint_key = start_pair_number + (uint64_t) rand()%size;
    ASSERT( uint_key <= end_pair_number );
  }

  std::ostringstream oss;
  oss<< uint_key;
  return oss.str();
}

[__null] void randomGenerateKeyRange(uint64_t& start_pair_number, uint64_t& end_pair_number ) {
  const uint64_t start_range = PAIRS_NUMBER - PAIRS_NUMBER_PER_CLIENT;

  start_pair_number = (uint64_t) rand()%start_range;
  if( start_pair_number == 0) {
    start_pair_number = 1;
  }

  end_pair_number = start_pair_number + PAIRS_NUMBER_PER_CLIENT - 1;
  ASSERT( end_pair_number <= PAIRS_NUMBER);
  return;
}

}



