#include <functional>
#define get16bits(d) ((((uint32_t)(((const uint8_t *)(d))[1])) << 8)\
                       +(uint32_t)(((const uint8_t *)(d))[0]) )

service MemcachedServer;

provides Null;

time = MaceTime;

constants {
  uint8_t WRITE_TYPE = 0;
  uint8_t READ_TYPE = 1;
}

constructor_parameters {
  NodeSet DATABASE_NODE = NodeSet();

  uint32_t TABLE_NUMBER = 1;
  uint64_t ITEM_NUMBER_PER_TABLE = 10000;
  uint64_t PAIRS_NUMBER = 1000000;
  uint64_t OUTPUT_COUNT = 100;

  uint32_t DELETE_COUNT = 10;
}

typedefs {
  typedef mace::map< mace::string, Item > TableType;
  typedef mace::deque< RemoveItem > RemoveListType;
}

services {
  Transport t;
}

messages {
  ReadRequest {
    uint32_t clientId;
    mace::string key;
    uint32_t tableId;
  }

  ReadReply {
    uint32_t clientId;
    mace::string key;
    mace::string value;
    bool isCacheMiss;
  }

  WriteRequest {
    uint32_t clientId;
    mace::string key;
    mace::string value;
    uint32_t tableId;
  }

  WriteReply {
    uint32_t clientId;
    mace::string key;
    bool isCacheMiss;
  }

  ReadDatabase {
    uint32_t clientId;
    mace::string key;
    MaceKey clientAddr;
    uint32_t tableId;
  }

  WriteDatabase {
    mace::string key;
    mace::string value;
    uint32_t tableId;
  }

  ReadDatabaseReply {
    uint32_t clientId;
    mace::string key;
    mace::string value;
    MaceKey clientAddr;
    uint32_t tableId;
  }

  ReportClientNumber {
    uint32_t client_number;
  }

}

auto_types {
  Item __attribute((comparable(equals=default; lessthan=default))) {
    mace::string key;
    mace::string value;
    uint64_t timestamp;
    uint8_t type;
  }

  RemoveItem __attribute((comparable(equals=default; lessthan=default))) {
    mace::string key;
    uint64_t timestamp;
  }
}

state_variables {
  context ItemTable<uint32_t taleId> {
    uint32_t tId;
    TableType table;
    RemoveListType removeList;
    uint64_t item_number;
    uint64_t miss_number;
    uint64_t get_number;  

    uint64_t request_count; 
    MaceKey databaseAddr; 

    uint64_t max_item_number;
  }
}

local_address {
  return downcall_localAddress();
}


transitions {
  downcall maceInit() {
    srand( mace::getmtime() );
    ASSERT(DATABASE_NODE.size() == 1 );

    const MaceKey databaseAddr = *(DATABASE_NODE.begin());

    mace::set< mace::pair<mace::string, mace::string> > ownerships;
    for(uint32_t i=0; i<TABLE_NUMBER; i++){
      std::ostringstream oss;
      oss<< "ItemTable[" << i << "]";

      mace::pair<mace::string, mace::string> ownership("globalContext", oss.str() );
      ownerships.insert(ownership);
      async_initItemTable(i, databaseAddr);  
    }
    addNewOwnerships(ownerships);
  }

  async [ ItemTable<tableId> ] initItemTable(uint32_t tableId, const MaceKey& database_addr){
    ADD_SELECTORS("MemcachedServer");
    tId = tableId;
    
    item_number = 0;
    miss_number = 0;
    get_number = 0;  
    request_count = 0;

    max_item_number = ITEM_NUMBER_PER_TABLE;
    databaseAddr = database_addr;

    maceout<< "To initialize table " << tableId <<" with item number="<< item_number <<" database="<< databaseAddr << Log::endl;
  }

  upcall [ItemTable<msg.tableId>] deliver(const MaceKey& src, const MaceKey& dest, const ReadRequest& msg) {
    ADD_SELECTORS("MemcachedServer");
    uint32_t delete_count = 0;
    while( !removeList.empty() && delete_count <= DELETE_COUNT ) {
      const RemoveItem& rItem = removeList.front();
      TableType::iterator mIter = table.find(rItem.key);
      if( mIter != table.end() && mIter->second.timestamp == rItem.timestamp ) {
        break;
      }
      delete_count ++;
      removeList.pop_front();
    }


    uint64_t current_time = mace::getmtime();
    bool isCacheMiss = false;
    TableType::iterator iter = table.find(msg.key);

    if( iter != table.end() ) {
      iter->second.timestamp = current_time;
      
      RemoveItem rItem( msg.key, current_time);
      removeList.push_back( rItem );

      downcall_route(src, ReadReply(msg.clientId, msg.key, iter->second.value, isCacheMiss) );
    } else {
      downcall_route( databaseAddr, ReadDatabase(msg.clientId, msg.key, src, msg.tableId) );
      isCacheMiss = true;
      miss_number ++;  
    }
    request_count ++;
    if( request_count % OUTPUT_COUNT == 0) {
      maceout<< "Table("<< tId <<"): requestCount="<<request_count<<" missCount="<<miss_number <<" CurrentItemCount=" << item_number << Log::endl; 
      miss_number = 0;
    }
  }

  upcall [ItemTable<msg.tableId>] deliver(const MaceKey& src, const MaceKey& dest, const WriteRequest& msg) {
    ADD_SELECTORS("MemcachedServer");
    uint64_t current_time = mace::getmtime();
    bool isCacheMiss = false;
    TableType::iterator iter = table.find(msg.key);
    if( iter != table.end() ) {
      iter->second.timestamp = current_time;
      iter->second.type = WRITE_TYPE;

      RemoveItem rItem( msg.key, current_time);
      removeList.push_back( rItem );
    } else {
      isCacheMiss = true;
      while( item_number >= max_item_number ) {
        Item toWriteItem;
        bool findMinItemFlag = false;
        while( !findMinItemFlag && !removeList.empty() ) {
          const RemoveItem& rItem = removeList.front();
          TableType::iterator mIter = table.find(rItem.key);
          if( mIter != table.end() && mIter->second.timestamp == rItem.timestamp ) {
            findMinItemFlag = true;
            toWriteItem = mIter->second;
            table.erase(mIter);
            item_number --;
          }

          removeList.pop_front();
        }

        if( !findMinItemFlag ) {
          uint64_t min_time = current_time;
          TableType::iterator min_iter;
          for( TableType::iterator miter = table.begin(); miter != table.end(); miter++ ) {
            if( min_time > miter->second.timestamp ) {
              min_time = miter->second.timestamp;
              min_iter = miter;
            }
          }
          toWriteItem = min_iter->second;
          table.erase(min_iter);
          item_number --;
        }
      }

      downcall_route( databaseAddr, WriteDatabase(msg.key, msg.value, tId) );
      Item item(msg.key, msg.value, current_time, WRITE_TYPE);
      table[msg.key] = item;
      RemoveItem rItem(msg.key, current_time);
      removeList.push_back(rItem);
      item_number ++;

      miss_number ++;
    }

    request_count ++;
    if( request_count % OUTPUT_COUNT == 0) {
      maceout<< "Table("<< tId <<"): requestCount="<<request_count<<" missCount="<<miss_number <<" CurrentItemCount=" << item_number << Log::endl;
      miss_number = 0; 
    }

    downcall_route(src, WriteReply(msg.clientId, msg.key, isCacheMiss) );
  }

  upcall [ItemTable<msg.tableId>] deliver(const MaceKey& src, const MaceKey& dest, const ReadDatabaseReply& msg) {
    bool isCacheMiss = true;
    uint64_t current_time = mace::getmtime();
    while( item_number >= max_item_number ) {
      Item toWriteItem;
      bool findMinItemFlag = false;
      while( !findMinItemFlag && !removeList.empty() ) {
        const RemoveItem& rItem = removeList.front();
        TableType::iterator mIter = table.find(rItem.key);
        if( mIter != table.end() && mIter->second.timestamp == rItem.timestamp ) {
          findMinItemFlag = true;
          toWriteItem = mIter->second;
          table.erase(mIter);
          item_number --;
        }

        removeList.pop_front();
      }

      if( !findMinItemFlag ) {
        uint64_t min_time = current_time;
        TableType::iterator min_iter;
        for( TableType::iterator miter = table.begin(); miter != table.end(); miter++ ) {
          if( min_time > miter->second.timestamp ) {
            min_time = miter->second.timestamp;
            min_iter = miter;
          }
        }

        toWriteItem = min_iter->second;
        table.erase(min_iter);
        item_number --;
      }
    }

    Item item(msg.key, msg.value, current_time, READ_TYPE);
    table[msg.key] = item;
    RemoveItem rItem(msg.key, current_time);
    removeList.push_back(rItem);
    item_number ++;

    downcall_route(msg.clientAddr, ReadReply(msg.clientId, msg.key, msg.value, isCacheMiss) );
  }  
}


routines {
  /*
   * Refer to http://www.azillionmonkeys.com/qed/hash.html */
  [__null] uint32_t get_bucket(const mace::string& key) {
    uint32_t len = key.length();
    char * cstr = new char [key.length()+1];
    char * data = cstr;
    uint32_t hash = len, tmp;
    int rem;

    if (len == 0) {
      delete[] cstr;
      return 0;
    }

    rem = len & 3;
    len >>= 2;

    /* Main loop */
    for (; len > 0; len--) {
      hash  += get16bits (data);
      tmp    = (get16bits (data+2) << 11) ^ hash;
      hash   = (hash << 16) ^ tmp;
      data  += 2*sizeof (uint16_t);
      hash  += hash >> 11;
    }

    /* Handle end cases */
    switch (rem) {
      case 3: hash += get16bits (data);
              hash ^= hash << 16;
              hash ^= ((signed char)data[sizeof (uint16_t)]) << 18;
              hash += hash >> 11;
              break;
      case 2: hash += get16bits (data);
              hash ^= hash << 11;
              hash += hash >> 17;
              break;
      case 1: hash += (signed char)*data;
              hash ^= hash << 10;
              hash += hash >> 1;
    }

    /* Force "avalanching" of final 127 bits */
    hash ^= hash << 3;
    hash += hash >> 5;
    hash ^= hash << 4;
    hash += hash >> 17;
    hash ^= hash << 25;
    hash += hash >> 6;

    delete[] cstr;
    return hash % (TABLE_NUMBER);
  }

  [__null] mace::string generateRandomKey( const uint64_t size ) {
    const uint64_t uint_key = (uint64_t) rand() % size;
    std::ostringstream oss;
    oss<< uint_key;
    return oss.str();
  }

}


