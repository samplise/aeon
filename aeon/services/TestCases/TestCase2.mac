/**
chuangw: test case 2 tests routines (synchronous calls )

test the impact of branching factors and the depth of contexts.
*/
service TestCase2;
trace=high;

constructor_parameters {
  uint32_t NCONTEXTS = 100;
  uint32_t NSUBCONTEXTS = 100;
  uint32_t NSUBSUBCONTEXTS = 100;
  uint32_t NDEPTH = 3;
  uint32_t NWALK = 100; // number of random walks at a time.
  uint64_t TIMER1_PERIOD     =  2000000; // 2 sec
}

state_variables {
  uint32_t inited;
  context Contexts<uint32_t n>{
    uint32_t inited;
    context SubContexts< uint32_t m>{
      uint32_t inited;
      context SubSubContexts< uint32_t k>{

      }

    }
  }
  timer timer1 __attribute((recur(TIMER1_PERIOD)));
}
 
transitions {
  downcall (state == init) maceInit()  {
    inited = 0;
    if( NDEPTH > 0 ){
      for(uint32_t n=0;n< NCONTEXTS;n++){
        async_cellInit( n );
      }
    }
  }

  async [Contexts<n>] cellInit( uint32_t n ){
    inited = 0;
    if( NDEPTH > 1 ){
      for(uint32_t m=0; m< NSUBCONTEXTS; m++){
        async_subInit( n, m );
      }
    }
    if( NDEPTH == 1 ){
      async_cellInitDone( n );
    }

  }
  async cellInitDone( uint32_t n ){
    inited++;
    if( inited == NCONTEXTS ){
      // start random walk
      timer1.schedule(TIMER1_PERIOD);
    }
  }

  async [Contexts<n>::SubContexts<m>] subInit ( uint32_t n, uint32_t m ){
    inited = 0;
    if( NDEPTH > 2 ){
      for(uint32_t k=0; k< NSUBSUBCONTEXTS; k++){
        async_subsubInit( n, m, k );
      }
    }
    if( NDEPTH == 2 ){
      async_subInitDone( n, m );
    }
  }
  async [Contexts<n>] subInitDone( uint32_t n, uint32_t m ){
    inited++;
    if( inited == NSUBCONTEXTS ){
      async_cellInitDone( n );
    }
  }

  async [Contexts<n>::SubContexts<m>::SubSubContexts<k>] subsubInit ( uint32_t n, uint32_t m, uint32_t k ){
    if( NDEPTH > 3 ){
      ABORT("NDEPTH can not be larger than 3");
    }
    if( NDEPTH == 3 ){
      async_subsubInitDone( n, m, k );
    }
  }
  async [Contexts<n>::SubContexts<m>] subsubInitDone( uint32_t n, uint32_t m, uint32_t k ){
    inited++;
    if( inited == NSUBSUBCONTEXTS ){
      async_subInitDone( n, m );
    }
  }

  scheduler timer1() {
    //std::cout << curtime << " timer1 expired." << std::endl;

    for(uint32_t x=0;x< NWALK; x++){
      startRandomWalk(1, NDEPTH);
    }
  }
  /*scheduler timer2() {
    //std::cout << curtime << " timer1 expired." << std::endl;

    for(uint32_t x=0;x< NWALK; x++){
      startRandomWalk(2, 3);
    }
  }
  scheduler timer3() {
    //std::cout << curtime << " timer1 expired." << std::endl;

    for(uint32_t x=0;x< NWALK; x++){
      startRandomWalk(3, 3);
    }
  }
  */

  async walkFromGlobal( uint32_t end_depth ){
    ASSERT( end_depth >= 0 );
    if( end_depth > 0 ){
      // find a context to enter
      uint32_t n = pickPrefix( NCONTEXTS );
      enterContext( n, end_depth );
    }
  }

  async [Contexts<n>] walkFromContext( uint32_t n, uint32_t end_depth ){
    downgradeCurrentContext();
    ASSERT( end_depth >= 1 );
    if( end_depth > 1 ){
      // find a context to enter
      uint32_t m = pickPrefix( NSUBCONTEXTS );
      enterSubContext( n, m, end_depth );
    }
        
  }

  async [Contexts<n>::SubContexts<m>] walkFromSubContext( uint32_t n, uint32_t m, uint32_t end_depth ){
    downgradeCurrentContext();
    ASSERT( end_depth >= 2 );
    if( end_depth > 2 ){
      // find a context to enter
      uint32_t k = pickPrefix( NSUBSUBCONTEXTS );
      enterSubSubContext( n, m, k, end_depth );
    }
    
  }

  async [Contexts<n>::SubContexts<m>::SubSubContexts<k>] walkFromSubSubContext( uint32_t n, uint32_t m, uint32_t k, uint32_t end_depth ){
    downgradeCurrentContext();
    ASSERT( end_depth >= 3 );
  }
}

routines {
  [__null] void startRandomWalk(uint32_t begin_depth, uint32_t end_depth){
    switch( begin_depth ){
      case 0:  // start at global context
        async_walkFromGlobal( end_depth );
        break;
      case 1:
        // pick a prefix
        {
          uint32_t n = pickPrefix( NCONTEXTS );
          async_walkFromContext( n, end_depth );
        }
        break;
      case 2:
        // pick a prefix
        {
          uint32_t n = pickPrefix( NCONTEXTS );
          uint32_t m = pickPrefix( NSUBCONTEXTS );
          async_walkFromSubContext( n, m, end_depth );
        }
        break;
      case 3:
        // pick a prefix
        {
          uint32_t n = pickPrefix( NCONTEXTS );
          uint32_t m = pickPrefix( NSUBCONTEXTS );
          uint32_t k = pickPrefix( NSUBSUBCONTEXTS );
          async_walkFromSubSubContext( n, m, k, end_depth );
        }
        break;
    }

  }

  [__null] uint32_t  pickPrefix( uint32_t range ){
    return RandomUtil::randInt(range);
  }

  [Contexts<n>] void enterContext( uint32_t n, uint32_t end_depth  ){
    downgradeCurrentContext();
    if( end_depth > 1 ){
      // find a context to enter
      uint32_t m = pickPrefix( NSUBCONTEXTS );
      enterSubContext( n, m, end_depth );
    }

  }
  [Contexts<n>::SubContexts<m>] void enterSubContext ( uint32_t n, uint32_t m , uint32_t end_depth ){
    downgradeCurrentContext();
    if( end_depth > 2 ){
      // find a context to enter
      uint32_t k = pickPrefix( NSUBSUBCONTEXTS );
      enterSubSubContext( n, m, k, end_depth );
    }

  }

  [Contexts<n>::SubContexts<m>::SubSubContexts<k>] void enterSubSubContext( uint32_t n, uint32_t m, uint32_t k, uint32_t end_depth ){
    downgradeCurrentContext();
  }
}
