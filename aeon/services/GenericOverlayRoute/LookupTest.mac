/* 
 * LookupTest.mac : part of the Mace toolkit for building distributed systems
 * 
 * Copyright (c) 2011, Charles Killian
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of the contributors, nor their associated universities 
 *      or organizations may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ----END-OF-LEGAL-STUFF---- */
#include <fstream>

service LookupTest;

provides Null;

trace = med;

services {
  Transport[ReceiveData] router = auto(shared, [hopbyhop], []); //RecursiveOverlayRoute();
  Transport[ReceiveData] reply = auto(shared, [], [lowlatency]); //UdpTransport();
  //   Transport[ReceiveData] reply = TcpTransport();
}

typedefs {
  typedef mace::deque<Query> Schedule;
}

auto_types {
  Query {
    uint64_t time;
    MaceKey key;
  };
}

state_variables {
  uint64_t startTime;
  Schedule schedule;
  timer lookupTimer;
  MaceKey meIpv4;
  MaceKey meSha;
}

messages {
  Lookup {
    uint64_t sent;
    MaceKey srcIp;
  };

  LookupReply {
    MaceKey key;
    MaceKey srcKey;
    uint64_t echoSent;
  };
}

method_remappings {
  uses {
    downcall_route(const MaceKey&, const Message& -> const std::string&, registration_uid_t regId);
    downcall_route(const MaceKey&, const Lookup&, registration_uid_t regId = router);
    downcall_route(const MaceKey&, const LookupReply&, registration_uid_t regId = reply);
  }
  implements {
    upcalls {
      deliver(const MaceKey&, const MaceKey&, const Message& <- const std::string&);
    }
  }
}

local_address {
  return downcall_localAddress(router);
}

transitions {
  downcall maceInit() {
    readSchedule();
    meIpv4 = downcall_localAddress(reply);
    meSha = downcall_localAddress(router);
    if (params::containsKey("start_time")) {
      startTime = params::get<uint64_t>("start_time") * 1000;
    }
    else {
      startTime = curtime;
    }
    
    scheduleTimer();
  }

  upcall deliver(const MaceKey& src, const MaceKey& dest, const Lookup& m) {
    downcall_route(m.srcIp, LookupReply(dest, meSha, m.sent));
  }

  upcall deliver(const MaceKey& src, const MaceKey& dest, const LookupReply& m) {
    uint64_t latency_ms = (curtime - m.echoSent) / 1000;
    std::cout << curtime << " found " << m.key << " on " << m.srcKey << ", " << src
	      << " in " << latency_ms << " ms." << std::endl;
  }

  scheduler (!schedule.empty()) lookupTimer() {
    Query& q = schedule.front();
    ANNOTATE_SET_PATH_ID_STR(NULL, 0, "lookup-%s-%s", meIpv4.addressString().c_str(), q.key.addressString().c_str());
    std::cout << curtime << " looking up " << q.key << std::endl;
    downcall_route(q.key, Lookup(curtime, meIpv4));
    schedule.pop_front();
    scheduleTimer();
  }

  scheduler lookupTimer() {
    maceerr << "timer fired with empty schedule" << Log::endl;
    exit(-1);
  }
}

routines {
  void scheduleTimer() {
    do {
      if (schedule.empty()) {
	macewarn << "out of schedule entries" << Log::endl;
	return;
      }
      int64_t wait = schedule.front().time + startTime - curtime;
      if (wait < 0) {
	Query& q = schedule.front();
	macewarn << "skipping key " << q.key << " with negative wait";
	schedule.pop_front();
      }
      else {
	lookupTimer.schedule(wait);
	return;
      }
    } while (true);
  }
  
  void readSchedule() {
    std::string filename = params::get<std::string>("schedule");
    std::ifstream in;
    in.open(filename.c_str());
    if (!in) {
      maceerr << "cannot read " << filename << Log::endl;
      exit(-1);
    }
    in.seekg(0, std::ios::end);
    std::streampos pos = in.tellg();
    in.seekg(0, std::ios::beg);
    while (pos != in.tellg()) {
      int32_t t;
      in.read((char*)&t, 4);
      t = ntohl(t);
      char b[20];
      in.read(b, 20);
      std::string k(b, 20);
      macedbg(1) << t << "\t" << Log::toHex(k) << Log::endl;
      Query q((uint64_t)t * 1000, MaceKey(sha160, b));
      schedule.push_back(q);
    }
  }
}
