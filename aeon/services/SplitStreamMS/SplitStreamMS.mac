/* 
 * SplitStreamMS.mac : part of the Mace toolkit for building distributed systems
 * 
 * Copyright (c) 2011, Charles Killian
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of the contributors, nor their associated universities 
 *      or organizations may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ----END-OF-LEGAL-STUFF---- */
/*
 * SplitStreamMS.mac
 * 
 * This file contains a rough implementation of the splitstream protocol, 
 * as described in the SOSP paper.
 *
 */

#include "lib/BitmapDigest.h"
#include "lib/marray.h"

//These macros control the additional levels of debugging included in the mac file.
//#define SPARE_CAPACITY_TRACE
//#define DATA_TRACE
//#define PUSHDOWN_TRACE

using Log::endl;
using mace::string;
using mace::array;

service SplitStreamMS;

provides Multicast, Group;

trace=med;

constructor_parameters {
  //NOTE: Do something to get these from Params class possibly.
  int NUM_STRIPES = 16;               //The number of stripes to subscribe to (per-SS-group)
  int FORWARD_STRIPES = 18;           //The number of stripes to forward data for (for experiments with uneven bandwidth capacities -- this should be replaced by a command line option via the Params class) -- note -- this is per-SS-group.
}

constants { 
  int MAX_SESSIONS = 10;              //The maximum number of splitstream multicast sessions to keep state for
  int DIGIT_BITS = 4;             //# of bits in splitstream stripe prefix (part of total bits)
  int TOTAL_STRIPES = 1 << DIGIT_BITS;

  int SS_PRINTER_INTERVAL = 1*1000*1000;        //The period (in seconds) of the splitstream printer timer
}

auto_types {
  //   splitsets MAX_SESSIONS {            //A data type to store splitstream multicast session state in.
  PublishSession {
    int currentStripe;               //This element stores the next stripe to send data to (round robbin)
    int sequenceNum;                 //The current sequence number the stripe is sending
    array<MaceKey, TOTAL_STRIPES> stripeIds;
  }

  //The following data type is used to prevent duplicate deliveries 
  //(and more importantly, duplicate forwarding along the trees)
  //   subsets MAX_SESSIONS {              //A data type to store the set of received sequence numbers for each splitstream multicast session
  SubscribeSession {
    bitmap_digest received_filter __attribute((dump(no), serialize(no)));      //The working_set tracks received sequence numbers, and auto-ages.  
  }
}

typedefs {
  typedef mace::map<MaceKey, PublishSession> PublishSessions;
  typedef mace::map<MaceKey, SubscribeSession> SubscribeSessions;
  typedef mace::map<MaceKey, NodeSet> TreeNodeSet;
}

services {
  //   OverlayRouter overlay_ =Pastry();
  //   Route recursive_ =RecursiveOverlayRoute(TransportServiceClass::NULL_, overlay_);
  //   Route direct_ =CacheRecursiveOverlayRoute(overlay_);

  //Would be great to somehow link this router to the sharedrouter below.  Could be based on registration id matching?
  OverlayRouter router = auto(shared, [], []);

  Route recursive_ = auto(shared, [hopbyhop,sharedrouter], []);
  Route direct_ = auto(shared, [direct,sharedrouter], []);

  ScribeTree tree_ = ScribeMS(router, recursive_, direct_);
  HierarchicalMulticast mc_ = GenericTreeMulticast(direct_, tree_);
}

messages {
  Data { //This message is for application data (API multicast) and will be delivered to the application.
    MaceKey groupId; //this is the splitstream group id
    int sequenceNum; //for reordering, counting, etc. 
    registration_uid_t regId;
    string payload __attribute((dump(no)));
  }
  JoinReq { //This message is anycast to request membership in the destination stripe.
    MaceKey groupId; //The group we are trying to join
    int joinSeq;
  }
}

state_variables {
  MaceKey ANYCAST_ID;
  PublishSessions my_sessions;              //The set of multicast sessions this node is sending on
  SubscribeSessions my_subscriptions;           //The set of multicast sessions this node is receiving on
  timer printer __attribute((recur(SS_PRINTER_INTERVAL)));  //This timer is used to periodically print out splitstream state
}

transitions {
  //init API init (init state, API init call)
  //
  //initialize the local node identifier by taking the hash of my IP address.
  //initialize the outdegree to 0
  //schedule the spare capacity join timer, and the printer timer.
  downcall (state == init) maceInit() { 
    downcall_setAuthoritativeGroupJoinHandler(tree_);
    ASSERT(localAddress().addressFamily() == SHA32 || localAddress().addressFamily() == SHA160);
    if(localAddress().addressFamily() == SHA160) {
      ANYCAST_ID = MaceKey(sha160, 45);
    } else {
      ANYCAST_ID = MaceKey(sha32, 45);
    }
    printer.schedule(SS_PRINTER_INTERVAL);
    //XXX: Defer this until Pastry is ready?
#ifdef SPARE_CAPACITY_TRACE
    debug_macro( "SplitStream initially joining spare capacity group %.8x!\n",ANYCAST_ID);
#endif
  }

  //API create_group (any state, the higher layer/application calls macedon_create_group() )
  //
  //Things to do:
  //1 - increase the outdegree by NUM_STRIPES
  //2 - create an array of the keys of the scribe trees for data delivery
  //3 - call scribe's create group function for all the associated scribe trees
  //4 - Initialize the stripe number to 0, and the sequence number
  downcall (!my_sessions.containsKey(groupId)) createGroup(const MaceKey& groupId) {
    //PROCESS:
    //1 - Generate the set of Scribe Keys based on splitstream group_id
    PublishSession session;
    uint mostSig = groupId.getNthDigit(0,DIGIT_BITS);

    //2- Call Scribe create_group for each of the scribe keys
    //3- Store set of scribe keys for splitstream group_id. (neighbor_add).
    for(int i=0; i<TOTAL_STRIPES; i++) {
      session.stripeIds[i] = groupId;
      session.stripeIds[i].setNthDigit(mostSig, 0, DIGIT_BITS);
      mostSig++;
      mostSig %= TOTAL_STRIPES;
      downcall_createGroup(session.stripeIds[i]);				
    }
    //4- Initialize strip number to 0, and the sequence number.
    session.currentStripe = 0;
    session.sequenceNum = 0;
    my_sessions[groupId] = session;
  }

  //API join (any state, the higher layer/application calls macedon_join() )
  //
  //PROCESS:
  //1- Generate the set of Scribe Keys based on splitstream group_id
  //2- Call Scribe join for each of the scribe keys
  //3- Create state for the joined tree (initializes the data tracking to 0 received).
  downcall (!my_subscriptions.containsKey(gId)) joinGroup(const MaceKey& gId) {
    MaceKey groupId = gId;
    downcall_joinGroup(ANYCAST_ID);
    //PROCESS:
    //1- Generate the set of Scribe Keys based on splitstream group_id
    uint mostSig = groupId.getNthDigit(0,DIGIT_BITS);

    //2- Call Scribe join for each of the scribe keys
    for(int i=0; i<NUM_STRIPES; i++) {
      groupId.setNthDigit(mostSig, 0, DIGIT_BITS);
      mostSig++;
      mostSig %= TOTAL_STRIPES;
      downcall_joinGroup(groupId);				
    }

    //3- Create state for the joined tree (initializes the data tracking to 0 received).
    my_subscriptions[gId] = SubscribeSession();
  }

  //API leave (any state, the higher layer/application calls macedon_leave() )
  //
  //PROCESS:
  //1- Generate the set of Scribe Keys based on splitstream group_id
  //2- Call Scribe join for each of the scribe keys
  //3- Remove the state for the splitstream session
  downcall (my_subscriptions.containsKey(gId)) leaveGroup(const MaceKey& gId) {
    MaceKey groupId = gId;
    //PROCESS:
    //1- Generate the set of Scribe Keys based on splitstream group_id
    uint mostSig = groupId.getNthDigit(0,DIGIT_BITS);

    //2- Call Scribe leave for each of the scribe keys
    for(int i=0; i<NUM_STRIPES; i++) {
      groupId.setNthDigit(mostSig, 0, DIGIT_BITS);
      mostSig++;
      mostSig %= TOTAL_STRIPES;
      downcall_leaveGroup(groupId);				
    }

    //3- Remove the state for the splitstream session
    my_subscriptions.erase(groupId);
  }

  //API multicast (any state, macedon_multicast() called by the upper layer/application)
  //Only to be called by the source.
  //
  //PROCESS:
  //1- Get session from neighbor set
  //2- Call Scribe API multicast for scribe tree at stripe number X.
  //3- Increment stripe number & sequence_num.
  downcall (my_sessions.containsKey(groupId)) multicast(const MaceKey& groupId, const mace::string& s, registration_uid_t regId) { 
    bool multicastRet;
    //PROCESS:
    //1- Get session from neighbor set
    PublishSession& session = my_sessions[groupId];

    MaceKey nextHop = session.stripeIds[session.currentStripe];
    if(!upcall_forward(localAddress(), groupId, nextHop, s, regId)) { return true; } 

    //2- Call Scribe API multicast for scribe tree at stripe number X.
    multicastRet = downcall_multicast(nextHop, Data(groupId, session.sequenceNum, regId, s));

    //3- Increment stripe number & sequenceNum.
    session.currentStripe = (session.currentStripe + 1) % TOTAL_STRIPES;
    session.sequenceNum++;
    return multicastRet;
  }

  //forward data
  //
  //When data is first received, determine whether or not to forward it (and deliver it)
  //by checking to see if we've already received it.  
  upcall (my_subscriptions.containsKey(msg.groupId)) forward(const MaceKey& from, const MaceKey& dest, MaceKey& nextHop, const Data& msg) {
    SubscribeSession& session = my_subscriptions[msg.groupId];
    if(session.received_filter.contains(msg.sequenceNum)) {
#ifdef DATA_TRACE
      macewarn << "Dropping msg(seq: " << msg.sequenceNum << " ,ss: " << msg.groupId << " ,scr: " << dest << " ) because this sequence number has already been received." << endl;
#endif
      return false;
    }
    return true;
  }

  //recv data
  //
  //When data is delivered to splitstream, ask upper layer if we should forward it,
  //and deliver it locally.
  upcall (my_subscriptions.containsKey(msg.groupId)) deliver(const MaceKey& from, const MaceKey& dest, const Data& msg) {
    SubscribeSession& session = my_subscriptions[msg.groupId];
#ifdef DATA_TRACE
    maceout << "Rcvd msg(seq: " << msg.sequenceNum << " ,ss: " << msg.groupId << " ,scr: " << dest << " )" << endl;
#endif
    MaceKey nexthop = localAddress();
    if(upcall_forward(from, msg.groupId, nexthop, msg.payload, msg.regId)) {
#ifdef DATA_TRACE
      maceout << "Marking msg(seq: " << msg.sequenceNum << " ,ss: " << msg.groupId << " ,scr: " << dest << " ) as received." << endl;
#endif
      session.received_filter.insert(msg.sequenceNum);
      upcall_deliver(from, msg.groupId, msg.payload, msg.regId);
    }
    else {
#ifdef DATA_TRACE
      maceout << "Dropping msg(seq: " << msg.sequenceNum << " ,ss: " << msg.groupId << " ,scr: " << dest << " ) because upper layer said not to forward it." << endl;
#endif
    }
  }

  //forward joinReq
  //
  //This method handles processing of messages sent to the spare capacity group requesting
  //to join a stripe.  Comments of process are inline.
  upcall (computeOutdegree(msg.groupId) >= FORWARD_STRIPES) forward(const MaceKey& from, const MaceKey& dest, MaceKey& nextHop, const JoinReq& msg) {
    //CHECK 1: Do we have room?
#ifdef SPARE_CAPACITY_TRACE
    maceout << "Received JoinReq & no forward capacity. (dest: " << dest << " ,from: " << from << " )" << endl;
#endif
    downcall_leaveGroup(ANYCAST_ID);
    return true;
  }
  upcall (!downcall_isJoinedGroup(msg.groupId)) forward(const MaceKey& from, const MaceKey& dest, MaceKey& nextHop, const JoinReq& msg) {
    //CHECK 2: Do we forward for this tree?
    //THIS SHOULDN'T HAPPEN IN PRACTICE.
#ifdef SPARE_CAPACITY_TRACE
    macewarn << "Sorry, don't forward this stripe. (dest: " << dest << " ,from: " << from << " )" << endl;
#endif
    return true;
  }
  upcall /*(else) */ forward(const MaceKey& from, const MaceKey& dest, MaceKey& nextHop, const JoinReq& msg) {
#ifdef SPARE_CAPACITY_TRACE
    maceout << "In forward JoinReq (dest: " << dest << " ,from: " << from << " ,groupId " << msg.groupID << " )" << endl;
#endif
    //CHECK 3: Is this node in my path to the root?
    //NOTE: Assume Scribe handles routing loop checking, returns 1 if a loop is found!!!
    int success = downcall_addChild(msg.groupId, from, msg.joinSeq);
#ifdef SPARE_CAPACITY_TRACE
    maceout << "Accepted child if ( " << !success << " != 0 ). (dest: " << dest << " ,from: " << from << " ,groupId " << msg.groupID << " )" << endl;
#endif
    if(success==2) {
#ifdef SPARE_CAPACITY_TRACE
      maceout << "As child is already in group, terminating anycast JoinReq. (dest: " << dest << " ,from: " << from << " ,groupId " << msg.groupID << " )" << endl;
#endif
      return false;
    } else if(success==0) {
      int outdegree = computeOutdegree(msg.groupId);
      if(outdegree >= FORWARD_STRIPES) {
        //outdegree is maximum.  leave the anycast group.
#ifdef SPACE_CAPACITY_TRACE
        debug_macro( "Outdegree at max (%d)!  Leaving spare capacity group (%.8x)?\n", outdegree, ANYCAST_ID);
#endif
        downcall_leaveGroup(ANYCAST_ID);
      } //else there is still spare capacity
      return false;
    } else {
      //KEEP ON FORWARDING
      return true;
    }
  }

  //recv joinReq
  //
  //When a joinReq message is recieved, this means that no-one stoped the forwarding.  The node receiving
  //the message should be the root of the spare capacity group, and this represents a failure to join.
  //One question is what should we do now?  This implementation just prints an error message, and goes
  //on.
  upcall deliver(const MaceKey& from, const MaceKey& dest, const JoinReq& msg) {
    //NOTE: This happens when an anycast message is delivered to the root of an anycast tree, in failure.
    maceerr << "Forest creation failed!  JoinReq found no parent (dest: " << dest << " ,from: " << from << " ,groupId " << msg.groupId << " )" << endl;
  }

  // - PUSHDOWN_SELECTOR: When this node is pushed down from its parent, it is sent a list of 
  //   siblings. Scribe then does an extensible upcall to give protocols the option to select
  //   the node to attempt to join at.  
  upcall (groupId != ANYCAST_ID) selectParent(const MaceKey& groupId, const NodeSet& siblings, MaceKey& pushdownId, int joinSeq) { 
    //This roughly matches the description in the SOSP paper.
    bool retset=false;
#ifdef PUSHDOWN_TRACE
    macedbg << "Selecting child for group " << groupId << " from siblings " << siblings << endl;
#endif
    if(siblings.size() > 0) {
      NodeSet set;
      for(NodeSet::iterator i = siblings.begin(); i != siblings.end(); i++) {
        if(groupId.sharedPrefixLength(*i, DIGIT_BITS)) {
          set.insert(*i);
        }
      }
      if(set.size() > 0) { //pick randomly from the set of nodes with a common prefix.
        pushdownId = *set.random();
        retset=true;
      }
    }	
    if(!retset) { //If there was no node to join, then send an anycast message, and tell Scribe not to try a join.
#ifdef PUSHDOWN_TRACE
      macedbg << "Pushdown selector couldn't join sibling, sending anycast (for group " << groupId << " )" << endl;
#endif
      downcall_anycast(ANYCAST_ID, JoinReq(groupId, joinSeq));
      return 1; 
    } else {
#ifdef PUSHDOWN_TRACE
      macedbg << "Pushdown selector selecting ( " << pushdownId << " for group " << groupId << " )" << endl;
#endif
      return 0;
    }
  }

  upcall (regId ==tree_ && gId != ANYCAST_ID && computeOutdegree(gId) > FORWARD_STRIPES) verifyJoinGroup(const MaceKey& gId, const MaceKey& cId, registration_uid_t regId) {
  //XXX: should cId be in downcall_getChildren or not?
    //Need to push a node down.
    MaceKey groupId = gId;
    int common;
    bool owner;
    TreeNodeSet commonTreeKids;
    TreeNodeSet ownerTreeKids;

    uint mostSig = groupId.getNthDigit(0,DIGIT_BITS);

    //STEP 1: Pick a child in a tree we don't own and which has no common prefix
    for(int i=0; i<NUM_STRIPES; i++) {
      groupId.setNthDigit(mostSig, 0, DIGIT_BITS);
      mostSig++;
      mostSig %= TOTAL_STRIPES;

      common = groupId.sharedPrefixLength(localAddress(), DIGIT_BITS);
      owner = downcall_isRoot(groupId);
      const NodeSet& kids = downcall_getChildren(groupId);

      if(common == 0 && !owner) {
        //push down a child in a tree with no common prefix and for which we are not an owner.
        if(kids.size() > 0) {
          if(gId == groupId && kids.contains(cId)) {
            return false;
          } else {
            MaceKey child = *kids.random(); //this is to avoid erasing a var which is the reference we are erasing.
            downcall_pushdownChild(groupId, child);
            return true;
          }
        }
      } else if(common != 0 && !owner && kids.size() > 0) { //This is any stripe with a common prefix with me.
        commonTreeKids[groupId] = kids;
      } else if(owner != 0 && kids.size() > 1) { 
        //This is any stripe which I am owner for -- highest priority
        //Note: We only add it if it has at least 2 kids, as we can't push down our only 
        //kid for a stripe we own.
        ownerTreeKids[groupId] = kids;
      }
    }

    //STEP 2: Pick a child with the shortest common prefix with this stripe
    //        id, with a preference for the newest child.
    while(commonTreeKids.size() > 0) {
      int commonPrefix=groupId.bitLength()+1;
      int tmpCommon;
      TreeNodeSet::const_iterator random = commonTreeKids.random();
      const MaceKey& randomKey = random->first;
      const NodeSet& kids = random->second;
      NodeSet canRemove;
      for(NodeSet::const_iterator i = kids.begin(); i != kids.end(); i++) {
        tmpCommon = randomKey.sharedPrefixLength(*i, DIGIT_BITS);
        if(tmpCommon < commonPrefix) {
          commonPrefix = tmpCommon;
          canRemove.clear();
          canRemove.insert(*i);
        } else if(tmpCommon == commonPrefix) {
          canRemove.insert(*i);
        }
      }
      if(canRemove.size() > 0) {
        if(randomKey == gId && canRemove.contains(cId)) {
          return false;
        } else {
          MaceKey child = *kids.random();
          downcall_pushdownChild(randomKey, child);
          return true;
        }
      }  
      commonTreeKids.erase(randomKey);
    } 
    
    //Step 3: If no common non-owned stripe pick a child with the shortest common prefix with 
    //        the owned stripe id, with a preference for the newest child.
    while(ownerTreeKids.size() > 0) {
      int commonPrefix=groupId.bitLength()+1;
      int tmpCommon;
      TreeNodeSet::const_iterator random = ownerTreeKids.random();
      const MaceKey& randomKey = random->first;
      const NodeSet& kids = random->second;
      NodeSet canRemove;
      for(NodeSet::const_iterator i = kids.begin(); i != kids.end(); i++) {
        tmpCommon = randomKey.sharedPrefixLength(*i, DIGIT_BITS);
        if(tmpCommon < commonPrefix) {
          commonPrefix = tmpCommon;
          canRemove.clear();
          canRemove.insert(*i);
        } else if(tmpCommon == commonPrefix) {
          canRemove.insert(*i);
        }
      }
      if(canRemove.size() > 0) {
        if(randomKey == gId && canRemove.contains(cId)) {
          return false;
        } else {
          MaceKey child = *kids.random();
          downcall_pushdownChild(randomKey, child);
          return true;
        }
      }  
      ownerTreeKids.erase(randomKey);
    } 
    
    maceerr << "FIXME: How can we be forwarding too much and still have reached this point?" << endl;
    return false;
  }
  upcall (gId != ANYCAST_ID && computeOutdegree(gId) == FORWARD_STRIPES) notifyChildAdded(const MaceKey& gId, const MaceKey& cId) {
#ifdef SPACE_CAPACITY_TRACE
    maceout << "Outdegree at max!  Leaving spare capacity group ( " << ANYCAST_ID << " )." << endl;
#endif
    downcall_leaveGroup(ANYCAST_ID);
  }
  upcall (gId != ANYCAST_ID && computeOutdegree(gId) == FORWARD_STRIPES-1) notifyChildRemoved(const MaceKey& gId, const MaceKey& cId) {
#ifdef SPACE_CAPACITY_TRACE
    maceout << "Outdegree dropped under max!  Joining spare capacity group ( " << ANYCAST_ID << " )." << endl;
#endif
    downcall_joinGroup(ANYCAST_ID);
  }

}


routines {
  
  int computeOutdegree(MaceKey groupId) const {
    int outdegree = 0;
    uint mostSig = groupId.getNthDigit(0,DIGIT_BITS);

    //STEP 1: Pick a child in a tree we don't own and which has no common prefix
    for(int i=0; i<NUM_STRIPES; i++) {
      groupId.setNthDigit(mostSig, 0, DIGIT_BITS);
      mostSig++;
      mostSig %= TOTAL_STRIPES;
      outdegree += downcall_getChildren(groupId).size();
    }
    //Broken on source.
    return outdegree;
  }
}
