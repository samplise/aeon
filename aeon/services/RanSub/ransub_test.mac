/* 
 * ransub_test.mac : part of the Mace toolkit for building distributed systems
 * 
 * Copyright (c) 2011, Charles Killian, Adolfo Rodriguez, Dejan Kostic, James W. Anderson, John Fisher-Ogden, Ryan Braud
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the names of the contributors, nor their associated universities 
 *      or organizations may be used to endorse or promote products derived from
 *      this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ----END-OF-LEGAL-STUFF---- */
/**
 *  Implementation of the RanSub protocol
 *
 *  Adolfo Rodriguez
 *  Dejan Kostic
 *  Charles Killian
 */

#include "lib/mhash_map.h"
#include "lib/mstring.h"
#include "mhash_set.h"
// #include "AggregateServiceClass.h"

using mace::hash_map;
using mace::hash_set;
using mace::string;

service;

provides Null;

trace=low;

constants {
  int GOSSIP_CHANNEL = 1;
  uint64_t RANSUB_PRINTER_INTERVAL = 5*1000*1000;
}

services {
   Gossip gossip_ = auto(shared, [], []); //RanSub(); 
}

states {
  testing;
  done;
}

auto_types {
  gossip_data {
    MaceKey id;
  }
}

state_variables {	 
  timer printer __attribute((recur(RANSUB_PRINTER_INTERVAL)));
  gossip_data mydata;
  hash_map<MaceKey, gossip_data> currentGossip;
}	  

transitions {

  downcall (state == init) maceInit() {
    state_change(testing);
    mydata.id = localAddress();
    string str;
    mydata.serialize(str);
    downcall_publishGossip(GOSSIP_CHANNEL,str,gossip_);
    downcall_subscribeGossip(GOSSIP_CHANNEL,gossip_);
  } // init API init

  scheduler printer() {
//     maceLog("Have state for:\n");
//     for(int i = 0; i < curset.number_candidates; i++) {
//       maceLog("Node %.8x -- %s -- %s\n", curset.candidates[i].id, curset.candidates[i].key, curset.candidates[i].value);
//     }
  } // joined timer printer

  upcall (state == testing) deliverGossip(channel_id_t channelId, const GossipMap& gmap) {
    maceLog("Got gossip of size %zu.\n", gmap.size());
    for(GossipMap::const_iterator i = gmap.begin(); i != gmap.end(); i++) {
      maceout << "Adding or setting gossip for " << i->first << Log::endl;
      istringstream in(i->second);
      currentGossip[i->first].deserialize(in);     
    }
    for(hash_map<MaceKey, gossip_data>::iterator i = currentGossip.begin(); i != currentGossip.end(); i++) {
      maceout << "Current gossip for " << i->first << " is " << i->second.id << Log::endl;
    }
  }
} //transitions
