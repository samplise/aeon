#include <random>

service ElasticMemcachedClient;

provides Null;

time = MaceTime;

constructor_parameters {
  NodeSet MemcachedServer = NodeSet(); /* Should be only one node */
  
  uint64_t PAIRS_NUMBER = 40000000;
  uint64_t PAIRS_NUMBER_PER_CLIENT = 40000000; 
  uint32_t CLIENT_NUMBER = 8;

  uint64_t WARMUP_TIME_PERIOD = 120;

  uint64_t DAY_PERIOD = 100;
  uint32_t DAY_NUMBER = 3; 

  double DAY_JOIN = 0.2;
  double DAY_LEAVE = 0.5;
  double DAY_ERROR = 0.15;

  uint64_t OUTPUT_COUNT = 100;

  uint64_t TOTAL_MESSAGE_COUNT = 10;
  uint32_t STOP_FLAG = 0;

  uint32_t WRITE_PERCENT = 5;
}

typedefs {
  typedef mace::vector< mace::pair<mace::string, mace::string> > Pairs;
}

services {
  Transport t;
}

messages {
  ConnectionRequest {

  }

  ConnectionSetup {
    MaceKey proxyAddr;
  }

  ReadRequest {
    uint32_t clientId;
    mace::string key;
  }

  ReadReply {
  
    uint32_t clientId;
    mace::string key;
    mace::string value;
    bool isCacheMiss;
  }

  WriteRequest {
    uint32_t clientId;
    mace::string key;
    mace::string value;
  }

  WriteReply {
    uint32_t clientId;
    mace::string key;
    bool isCacheMiss;
  }

  ClientNumberReport {
    uint32_t client_number;
  }

}

auto_types {
  
}

state_variables {
  context Controller {
    mace::map<uint32_t, uint64_t> join_times;
    mace::map<uint32_t, uint64_t> leave_times;

    uint64_t current_day_start;
    uint64_t current_day_end;
    uint64_t current_day_mid;

    uint64_t exact_start_time;

    uint64_t sleep_time_period;

    uint32_t current_day;

    uint32_t current_client_number;
    MaceKey serverAddr;
  }
  
  context Client<uint32_t clientId> {
    bool isActive;

    uint64_t request_count;
    uint64_t cache_miss_count;
    uint64_t cache_hit_count;
    uint64_t read_request_count;
    uint64_t write_request_count;

    uint64_t start_pair_number;
    uint64_t end_pair_number;

    MaceKey serverAddr;

    uint64_t total_response_time;
    uint64_t last_send_timestamp;
  }
}

local_address {
  return downcall_localAddress();
}


transitions {
  downcall maceInit() {
    srand( mace::getmtime() );
    ASSERT( MemcachedServer.size() == 1 );
    mace::set< mace::pair<mace::string, mace::string> > ownerships;  
    for( uint32_t i=0; i<CLIENT_NUMBER; i++) {
      mace::string clientCtxName = generateContextName("Client", i);
      createNewOwnership( "globalContext", clientCtxName );
      async_initClient(i);
    }
    downcall_route( *(MemcachedServer.begin()), ConnectionRequest() );
  }

  async [Controller] initController(const MaceKey& server_addr) {
    ADD_SELECTORS("ElasticMemcachedClient");
    
    maceout<<"Initializing Controller!" << Log::endl;
    current_client_number = 0;
    serverAddr = server_addr;
    async_startController();
  }

  async [Controller] startController() {
    ADD_SELECTORS("ElasticMemcachedClient");
    sleep(WARMUP_TIME_PERIOD);
    maceout<< "Start Controller!" << Log::endl;
    

    current_day_start = 2;
    current_day_end = current_day_start + DAY_PERIOD;
    current_day_mid = (current_day_start+current_day_end) / 2;

    mace::vector<uint32_t> clientIds;
    for(uint32_t i=1; i< CLIENT_NUMBER; i++){
      async_setActive(i, false); 
      clientIds.push_back(i);
    }
    current_client_number = 1;
    join_times = generateRandomJoinTime( current_day_start, current_day_end, clientIds );
    leave_times = generateRandomLeaveTime( current_day_start, current_day_end, clientIds );

    exact_start_time = mace::getmtime();
    sleep_time_period = 0;
    current_day = 1;

    async_launchTimeScheduler();
  }

  async [Controller] startController2() {
    ADD_SELECTORS("ElasticMemcachedClient");
    sleep(WARMUP_TIME_PERIOD);
    maceout<< "Start Controller!" << Log::endl;
    uint32_t stage1_client = 1;
    uint32_t stage2_client = 4;
    uint32_t stage3_client = 8;
        
    for(uint32_t i=stage1_client; i<CLIENT_NUMBER; i++) {
      async_setActive(i, false);
    }

    uint32_t period = (uint32_t) ( DAY_PERIOD / 8 );
    uint32_t lower_time = 2+period;
    uint32_t upper_time = lower_time + 2*period;
    
    mace::vector<uint32_t> clientIds;
    uint32_t start_clientId = stage1_client;
    uint32_t end_clientId = stage2_client;
    for(uint32_t i=start_clientId; i< end_clientId; i++){
      clientIds.push_back(i);
    }
    
    mace::map<uint32_t, uint64_t> j_times = generateRandomJoinTimes2( lower_time, upper_time, 0.5, clientIds);
    mace::map<uint32_t, uint64_t>::iterator iter = j_times.begin();
    for(; iter != j_times.end(); iter++) {
      join_times[iter->first] = iter->second;
    }
    j_times.clear();

    lower_time = upper_time;
    upper_time = lower_time + 2*period;
    start_clientId = end_clientId;
    end_clientId = stage3_client;
    clientIds.clear();
    for( uint32_t i=start_clientId; i<end_clientId; i++ ) {
      clientIds.push_back(i);
    }
    j_times = generateRandomJoinTimes2( lower_time, upper_time, 0.5, clientIds );
    iter = j_times.begin();
    for(; iter!=j_times.end(); iter++ ) {
      join_times[iter->first] = iter->second;
    }
    j_times.clear();

    lower_time = upper_time;
    upper_time = lower_time + 2*period;
    start_clientId = end_clientId;
    end_clientId = CLIENT_NUMBER;
    clientIds.clear();
    for( uint32_t i=start_clientId; i<end_clientId; i++ ) {
      clientIds.push_back(i);
    }
    j_times = generateRandomJoinTimes2( lower_time, upper_time, 0.5, clientIds );
    iter = j_times.begin();
    for(; iter!=j_times.end(); iter++ ) {
      join_times[iter->first] = iter->second;
    }

    current_client_number = stage1_client;
    
    exact_start_time = mace::getmtime();
    sleep_time_period = 0;
    current_day = 1;

    mace::map<uint32_t, uint64_t>::const_iterator jtIter = join_times.begin();
    for(; jtIter != join_times.end(); jtIter ++) {
      maceout<< "Client("<< jtIter->first <<") join_time = " << jtIter->second << Log::endl;
    }

    async_launchTimeScheduler2();
  }

  async [Controller] launchTimeScheduler2() {
    ADD_SELECTORS("ElasticMemcachedClient");
    maceout<<"sleep time=" << sleep_time_period << Log::endl;
    sleep(sleep_time_period);
    uint64_t exact_current_time = mace::getmtime();
    
    uint64_t client_number_record = current_client_number;

    uint64_t current_time = (uint64_t) (exact_current_time - exact_start_time) / 1000000;
    maceout<< "Current Time: " << current_time << Log::endl;
 
    mace::vector<uint64_t> toRemoved;
    uint64_t next_join_time = 0;
    
    mace::map<uint32_t, uint64_t>::iterator iter = join_times.begin();
    for(; iter != join_times.end(); iter++ ){
      if( current_time >= iter->second ) {
        async_setActive( iter->first, true);
        current_client_number ++;
        toRemoved.push_back(iter->first);
      } else {
        if( next_join_time == 0 ) {
          next_join_time = iter->second;
        } else if( next_join_time > iter->second ) {
          next_join_time = iter->second;
        }
      }
    }
    for( uint64_t i=0; i<toRemoved.size(); i++ ) {
      join_times.erase( toRemoved[i] );
    }

    maceout<<"next_join_time=" << next_join_time << Log::endl;
    if( next_join_time > 0 ) {
      sleep_time_period = next_join_time - current_time;
      async_launchTimeScheduler2();
    } 
    maceout<< "Current Active Clients: " << current_client_number << Log::endl;
    if( client_number_record != current_client_number) {
      downcall_route(serverAddr, ClientNumberReport(current_client_number) );
    }
  }

  async [Controller] launchTimeScheduler() {
    ADD_SELECTORS("ElasticMemcachedClient");
    maceout<<"sleep time=" << sleep_time_period << Log::endl;
    sleep(sleep_time_period);
    uint64_t exact_current_time = mace::getmtime();
    
    uint64_t client_number_record = current_client_number;

    uint64_t current_time = (uint64_t) (exact_current_time - exact_start_time) / 1000000;
 
    mace::vector<uint64_t> toRemoved;
    uint64_t next_join_time = 0;
    uint64_t next_leave_time = 0;
    if( current_time <= current_day_mid ) {
      mace::map<uint32_t, uint64_t>::iterator iter = join_times.begin();
      for(; iter != join_times.end(); iter++ ){
        if( current_time >= iter->second ) {
          async_setActive( iter->first, true);
          current_client_number ++;
          toRemoved.push_back(iter->first);
        } else {
          if( next_join_time == 0 ) {
            next_join_time = iter->second;
          } else if( next_join_time > iter->second ) {
            next_join_time = iter->second;
          }
        }
      }
      for( uint64_t i=0; i<toRemoved.size(); i++ ) {
        join_times.erase( toRemoved[i] );
      }

    } else if ( current_time > current_day_mid ) {
      mace::map<uint32_t, uint64_t>::iterator iter = leave_times.begin();
      for(; iter != leave_times.end(); iter++ ) {
        if( current_time >= iter->second ) {
          async_setActive( iter->first, false);
          current_client_number --;
          toRemoved.push_back( iter->first );
        } else {
          if( next_leave_time == 0 ) {
            next_leave_time = iter->second;
          } else if( next_leave_time > iter->second ) {
            next_leave_time = iter->second;
          }
        } 
      }

      for( uint64_t i=0; i<toRemoved.size(); i++ ) {
        leave_times.erase( toRemoved[i] );
      }
    }

    maceout<<"next_join_time=" << next_join_time<<" next_leave_time="<< next_leave_time << Log::endl;
    if( next_join_time != 0 ) {
      sleep_time_period = next_join_time - current_time;
      async_launchTimeScheduler();
    } else if( next_leave_time != 0 ) {
      sleep_time_period = next_leave_time - current_time;
      async_launchTimeScheduler();
    } else {
      if( join_times.empty() && !leave_times.empty() ) {
        mace::map<uint32_t, uint64_t>::iterator iter = leave_times.begin();
        for(; iter != leave_times.end(); iter++ ) {
          if( next_leave_time == 0 ) {
            next_leave_time = iter->second;
          } else if( next_leave_time > iter->second ) {
            next_leave_time = iter->second;
          }
        }
        sleep_time_period = next_leave_time - current_time;
        async_launchTimeScheduler();
      } else if( join_times.empty() && leave_times.empty() ) {
        current_day ++;
        if( current_day <= DAY_NUMBER) {
          current_day_start = 2 + current_day_end;
          current_day_end = current_day_start + DAY_PERIOD;
          current_day_mid = (current_day_start+current_day_end) / 2;

          mace::vector<uint32_t> clientIds;
          for(uint32_t i=1; i< CLIENT_NUMBER; i++) clientIds.push_back(i);
          join_times = generateRandomJoinTime( current_day_start, current_day_end, clientIds );
          leave_times = generateRandomLeaveTime( current_day_start, current_day_end, clientIds );

          mace::map<uint32_t, uint64_t>::iterator iter = join_times.begin();
          for(; iter != join_times.end(); iter++ ) {
            if( next_join_time == 0 ) {
              next_join_time = iter->second;
            } else if( next_join_time > iter->second ) {
              next_join_time = iter->second;
            }
          }
          sleep_time_period = next_join_time - current_time;
          async_launchTimeScheduler();
        }
      }
    }
    maceout<< "Current Active Clients: " << current_client_number << Log::endl;
    if( client_number_record != current_client_number) {
      downcall_route(serverAddr, ClientNumberReport(current_client_number) );
    }
  }

  async [Client<clientId>] initClient( uint32_t const& clientId) {
    ADD_SELECTORS("ElasticMemcachedClient");
        
    request_count = 0;
    read_request_count = 0;
    write_request_count = 0;
    cache_miss_count = 0;
    cache_hit_count = 0;

    last_send_timestamp = 0;
    total_response_time = 0;

    isActive = false;
    if( PAIRS_NUMBER == PAIRS_NUMBER_PER_CLIENT ) {
      start_pair_number = 1;
      end_pair_number = PAIRS_NUMBER;
    } else {
      randomGenerateKeyRange(start_pair_number, end_pair_number);
    }
    serverAddr = *( MemcachedServer.begin() );
    maceout << "To initialize client(" << clientId <<") start_pair_number="<< start_pair_number<< " end_pair_number="<< end_pair_number << Log::endl;
  }

  async [Client<clientId>] setServerAddr(const uint32_t clientId, MaceKey const& addr ) {
    ADD_SELECTORS("ElasticMemcachedClient");
    serverAddr = addr;
    maceout<< "Client("<< clientId<<")'s new serverAddr=" << serverAddr << Log::endl;
    isActive = true;
    last_send_timestamp = mace::getmtime();
    
    const mace::string key_str = generateRandomKey(start_pair_number, end_pair_number);
    downcall_route( serverAddr, ReadRequest(clientId, key_str) );
  }

  async [Client<clientId>] launchRequest( uint32_t const& clientId ) {
    ADD_SELECTORS("ElasticMemcachedClient");

    last_send_timestamp = mace::getmtime();
    
    const mace::string key_str = generateRandomKey(start_pair_number, end_pair_number);
    downcall_route( serverAddr, ReadRequest(clientId, key_str) );

    /*
    uint32_t request_percent =  (uint32_t) rand()%100;
    
    if( request_percent < WRITE_PERCENT ) {
      write_request_count ++;
      mace::string value_str = getDefaultValue();
      downcall_route( serverAddr, WriteRequest(clientId, key_str, value_str) );
    } else {
      read_request_count ++;
      downcall_route( serverAddr, ReadRequest(clientId, key_str) );
    }
    */
  }

  async [Client<clientId>] setActive( uint32_t const& clientId, bool const& active ) {
    ADD_SELECTORS("ElasticMemcachedClient");
    if( active ) {
      maceout<< "Set Client("<< clientId <<") active!" << Log::endl;
    } else {
      maceout<< "Set Client("<< clientId <<") inactive" << Log::endl;
    }

    isActive = active;
    if( isActive ) {
      async_launchRequest(clientId);
    }
  }

  upcall [Client< msg.clientId >] deliver(const MaceKey& src, const MaceKey& dest, const ReadReply& msg) {
    ADD_SELECTORS("ElasticMemcachedClient");

    uint32_t clientId = msg.clientId; //getClientIdFromReplyStr(msg.replyStr);
    bool isCacheMiss = msg.isCacheMiss; //getIsCacheMissFromReplyStr(msg.replyStr);

    request_count ++;
    if( isCacheMiss ) {
      cache_miss_count ++;
    } else {
      cache_hit_count ++;
    }

    uint64_t recv_timestamp = mace::getmtime();
    uint64_t response_time = recv_timestamp - last_send_timestamp;
    total_response_time += response_time;

    if( request_count % OUTPUT_COUNT == 0 ) {
      uint64_t avg_response_time = (uint64_t) (total_response_time / OUTPUT_COUNT);
      maceout<< "Client("<< clientId <<"): requestCount=" << request_count << " cacheMissCount=" << cache_miss_count << " avg_response_time=" << avg_response_time <<" read_request_count=" << read_request_count <<" write_request_count="<< write_request_count<< Log::endl;

      read_request_count = 0;
      write_request_count = 0;
      cache_miss_count = 0;
      cache_hit_count = 0;
      total_response_time = 0;
    }
    if( isActive ) {
      //async_launchRequest( msg.clientId );
      last_send_timestamp = mace::getmtime();
    
      const mace::string key_str = generateRandomKey(start_pair_number, end_pair_number);
      downcall_route( serverAddr, ReadRequest( clientId, key_str ) );
/*
      uint32_t request_percent =  (uint32_t) rand()%100;
      if( request_percent < WRITE_PERCENT ) {
        write_request_count ++;
        mace::string value_str = getDefaultValue();
        downcall_route( serverAddr, WriteRequest(clientId, key_str, value_str) );
      } else {
        read_request_count ++;
        //downcall_route( serverAddr, ReadRequest( generateRequestStr(clientId, key_str) ) );
        downcall_route( serverAddr, ReadRequest( clientId, key_str ) );
      }
*/
    }
  }

  upcall [Client<msg.clientId>] deliver(const MaceKey& src, const MaceKey& dest, const WriteReply& msg) {
    ADD_SELECTORS("ElasticMemcachedClient");
    request_count ++;
    if( msg.isCacheMiss ) {
      cache_miss_count ++;
    } else {
      cache_hit_count ++;
    }

    uint64_t recv_timestamp = mace::getmtime();
    uint64_t response_time = recv_timestamp - last_send_timestamp;
    total_response_time += response_time;

    if( request_count % OUTPUT_COUNT == 0 ) {
      uint64_t avg_response_time = (uint64_t) (total_response_time / OUTPUT_COUNT);
      maceout<< "Client("<< msg.clientId <<"): requestCount=" << request_count << " cacheMissCount=" << cache_miss_count << " avg_response_time=" << avg_response_time <<" read_request_count=" << read_request_count <<" write_request_count="<< write_request_count<< Log::endl;

      read_request_count = 0;
      write_request_count = 0;
      cache_miss_count = 0;
      cache_hit_count = 0;
      total_response_time = 0;
    }
    if( isActive ) {
      async_launchRequest( msg.clientId );
    }
  }

  upcall deliver(const MaceKey& src, const MaceKey& dest, const ConnectionSetup& msg) {
    for(uint32_t i=0; i < CLIENT_NUMBER; i++ ) {
      async_setServerAddr(i, msg.proxyAddr);
      //async_setActive(i, true);
    }
    //async_initController(msg.proxyAddr);
  }

}


routines {
[__null] mace::string generateRequestStr(const uint32_t clientId, mace::string const& key) {
  std::ostringstream oss;
  oss<< clientId << "#" << key;
  return oss.str();
}

[__null] uint32_t getClientIdFromReplyStr(mace::string const& replyStr) {
  ADD_SELECTORS("ElasticMemcachedClient");

  StringList elems = StrUtil::split("#", replyStr );

  if( elems.size() != 4 ) {
    maceout<< "Fail to analyze reply string: " << replyStr << Log::endl;
    return 0;
  }

  uint32_t clientId = (uint32_t) atoi( elems[0].c_str() );
  return clientId;
}

[__null] bool getIsCacheMissFromReplyStr(mace::string const& replyStr) {
  ADD_SELECTORS("ElasticMemcachedClient");

  StringList elems = StrUtil::split("#", replyStr );

  if( elems.size() != 4 ) {
    maceout<< "Fail to analyze reply string: " << replyStr << Log::endl;
    return 0;
  }

  bool isCacheMiss = true;
  uint32_t miss = (uint32_t) atoi( elems[3].c_str() );
  if( miss > 0 ) {
    isCacheMiss = true;
  }  else {
    isCacheMiss = false;
  }

  return isCacheMiss;
}


[__null] mace::map<uint32_t, uint64_t> generateRandomJoinTimes2( const uint64_t& start_time, const uint64_t& end_time, const double& join_point, const mace::vector<uint32_t>& clientIds ) {
  ADD_SELECTORS("MemcachedClient");
  mace::map<uint32_t, uint64_t> join_times;

  std::default_random_engine generator(mace::getmtime());
  std::normal_distribution<double> distribution(join_point,DAY_ERROR);
  for( uint32_t i=0; i<clientIds.size(); i++ ) {
    const uint32_t clientId = clientIds[i];
    double d_join_time = distribution(generator);
    if( d_join_time < 0 ) {
      while( d_join_time < 0 ) d_join_time += 1;
    } else if( d_join_time > 1 ) {
      while( d_join_time > 1 ) d_join_time -= 1;
    }
 
    uint64_t period = end_time - start_time;

    uint64_t join_time = (uint64_t) ( d_join_time * period + start_time );
    ASSERT( join_time >= start_time && join_time < end_time );

    join_times[clientId] = join_time;
  } 

  return join_times;
}

[__null] mace::map<uint32_t, uint64_t> generateRandomJoinTime( const uint64_t& day_start, const uint64_t& day_end, const mace::vector<uint32_t>& clientIds ) {
  ADD_SELECTORS("MemcachedClient");
  mace::map<uint32_t, uint64_t> join_times;

  std::default_random_engine generator(mace::getmtime());
  std::normal_distribution<double> distribution(DAY_JOIN,DAY_ERROR);
  for( uint32_t i=0; i<clientIds.size(); i++ ) {
    const uint32_t clientId = clientIds[i];
    double d_join_time = distribution(generator);
    if( d_join_time < 0 ) {
      while( d_join_time < 0 ) d_join_time += 1;
    } else if( d_join_time > 1 ) {
      while( d_join_time > 1 ) d_join_time -= 1;
    }

    if( d_join_time > 0.5 ) d_join_time -= 0.5;

    uint64_t join_time = (uint64_t) ( DAY_PERIOD*d_join_time + day_start );
    ASSERT( join_time >= day_start && join_time < day_end );

    join_times[clientId] = join_time;
  } 

  mace::map<uint32_t, uint64_t>::const_iterator jtIter = join_times.begin();
  for(; jtIter != join_times.end(); jtIter ++) {
    maceout<< "Client("<< jtIter->first <<") join_time = " << jtIter->second << Log::endl;
  }

  return join_times;
}

[__null] mace::map<uint32_t, uint64_t> generateRandomLeaveTime( const uint64_t& day_start, const uint64_t& day_end, const mace::vector<uint32_t>& clientIds ) {
  ADD_SELECTORS("MemcachedClient");
  mace::map<uint32_t, uint64_t> leave_times;

  std::default_random_engine generator(mace::getmtime());
  std::normal_distribution<double> distribution(DAY_LEAVE, DAY_ERROR);
  for( uint32_t i=0; i<clientIds.size(); i++ ) {
    const uint32_t clientId = clientIds[i];
    double d_leave_time = distribution(generator);
    if( d_leave_time < 0 ) {
      while( d_leave_time < 0 ) d_leave_time += 1;
    } else if( d_leave_time > 1 ) {
      while( d_leave_time > 1 ) d_leave_time -= 1;
    }

    if( d_leave_time < 0.5 ) d_leave_time += 0.5;

    uint64_t leave_time = (uint64_t) ( DAY_PERIOD*d_leave_time + day_start );
    ASSERT( leave_time > day_start && leave_time <= day_end );

    leave_times[clientId] = leave_time;
  }

  mace::map<uint32_t, uint64_t>::const_iterator ltIter = leave_times.begin();
  for(; ltIter != leave_times.end(); ltIter ++) {
    maceout<< "Client("<< ltIter->first <<") leave_time = " << ltIter->second << Log::endl;
  }

  return leave_times;
}

[__null] mace::string generateRandomKey( const uint64_t start_pair_number, const uint64_t end_pair_number ) {
  ASSERT(end_pair_number >= start_pair_number);
  uint64_t uint_key;
  if( start_pair_number == end_pair_number ) {
    uint_key = start_pair_number;
  } else {
    uint64_t size = end_pair_number - start_pair_number;
    uint_key = start_pair_number + (uint64_t) rand()%size;
    ASSERT( uint_key <= end_pair_number );
  }

  std::ostringstream oss;
  oss<< uint_key;
  return oss.str();
}

[__null] void randomGenerateKeyRange(uint64_t& start_pair_number, uint64_t& end_pair_number ) {
  const uint64_t start_range = PAIRS_NUMBER - PAIRS_NUMBER_PER_CLIENT;

  start_pair_number = (uint64_t) rand()%start_range;
  if( start_pair_number == 0) {
    start_pair_number = 1;
  }

  end_pair_number = start_pair_number + PAIRS_NUMBER_PER_CLIENT - 1;
  ASSERT( end_pair_number <= PAIRS_NUMBER);
  return;
}

[__null] mace::string getDefaultValue() {
  mace::string str_value = "";
  mace::string seed_str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for(uint32_t i=0; i<19; i++) {
    str_value += seed_str;
  }
  return str_value;
}

[__null] mace::string generateContextName( const mace::string& contextTypeName, const uint32_t& contextId ) {
  std::ostringstream oss;
  oss<< contextTypeName << "[" << contextId << "]";
  return oss.str();
}

}



