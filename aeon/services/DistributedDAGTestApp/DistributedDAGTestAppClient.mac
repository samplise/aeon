#include "marray.h"
#include "RandomUtil.h"
#include "mvector.h"
#include "mlist.h"
#include "m_map.h"
#include <stdio.h>
#include <sys/time.h>

service DistributedDAGTestAppClient;
 
provides Null;


services {
  Transport t;
}
 
constants {
  
}
 
constructor_parameters {
  uint32_t N_CLIENTS = 1;
	NodeSet TagServer = NodeSet();

  
}

#minclude "DistributedDAGTestAppMessages.mi"

state_variables {
  context Client <uint32_t clientId> {
    uint32_t clientId;
    MaceKey serverAddr;
    
    uint64_t lastRequestTime;
    
    uint64_t reqCount;
  }

}
 
transitions {
  downcall maceInit() {
    ADD_SELECTORS("DistributedDAGTestAppClient");
    maceout << "Start DistributedDAGTestAppClient!" << Log::endl;
    ASSERT( TagServer.size() == 1 );
    for( uint32_t i=0; i<N_CLIENTS; i++) {
      uint32_t clientId = createNewContext("Client");
      mace::string clientCtxName = generateContextName("Client", clientId);
      createNewOwnership("globalContext", clientCtxName);
      async_initClient(clientId);
    }

  }

  async [Client<nClient>] initClient(const uint32_t& nClient) {
    ADD_SELECTORS("DistributedDAGTestAppClient");
    maceout << "To initialize Client("<< nClient <<")!" << Log::endl;

    clientId = nClient;
    reqCount = 0;
    serverAddr = *(TagServer.begin());
  
    async_launchRequest( clientId );
  }

  async [Client<nClient>] launchRequest( const uint32_t& nClient ){
    ADD_SELECTORS("DistributedDAGTestAppClient");

    reqCount ++;
    uint32_t nId = 1;
    uint32_t nnId = 2;
    bool new_node_flag = true;

    if( reqCount == 1 ) {
      nId = 1;
      nnId = 2;
    } else if( reqCount == 2 ) {
      nId = 1;
      nnId = 3;
    } else if( reqCount == 3 ) {
      nId = 2;
      nnId = 4;
    } else if( reqCount == 4 ) {
      nId = 3;
      nnId = 5;
    } else if( reqCount == 5 ) {
      nId = 4;
      nnId = 6;
    } else if( reqCount == 6 ){
      lastRequestTime = mace::getmtime();
      downcall_route(serverAddr, AddOwnershipRequest2( 1, clientId) );
      return;
    } else {
      return;
    }

    maceout << "Client("<< clientId <<") send request["<< reqCount <<"]!" << Log::endl;
    lastRequestTime = mace::getmtime();
    downcall_route(serverAddr, AddOwnershipRequest( nId, nnId, new_node_flag, clientId) );
  }

  upcall [Client<msg.clientId>] deliver(const MaceKey& src, const MaceKey& dest, const RequestReply& msg) {
    ADD_SELECTORS("DistributedDAGTestAppClient");
    
    uint64_t latency = mace::getmtime() - lastRequestTime;
    
    maceout<< "Client("<< clientId<<") latency="<< latency << " reqCount="<< reqCount << Log::endl;
    async_launchRequest( clientId );
  }

  

}

routines {
  [__null] mace::string generateContextName( const mace::string& ctxName, const uint32_t& id) {
    std::ostringstream oss;
    oss << ctxName <<"["<<id<<"]";
    return oss.str();
  }
}
