
FILE(GLOB sources *.cc *.c)

IF(NOT EXISTS ${DB_CXX_INC_PATH})
  LIST(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/MapConfig.cc)
ENDIF(NOT EXISTS ${DB_CXX_INC_PATH})

IF(NOT EXISTS ${HDFS_INC_PATH})
  LIST(REMOVE_ITEM sources ${CMAKE_CURRENT_SOURCE_DIR}/HDFSClient.cc)
ENDIF(NOT EXISTS ${HDFS_INC_PATH})

IF(NOT HAVE_MKSTEMP)
ENDIF(NOT HAVE_MKSTEMP)

WRITE_FILE(${EXTERNAL_VARS_FILE} "
# lib Links and Variables" APPEND)

ADD_LIBRARY(mace ${LIBTYPE} ${sources})
IF(NOT LIBRARY_OUTPUT_PATH)
  WRITE_FILE(${EXTERNAL_VARS_FILE} "LINK_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})" APPEND)
ENDIF(NOT LIBRARY_OUTPUT_PATH)

# IF(USE_TOKYO_CABINET)
#   FIND_LIBRARY(LIB_TOKYO_CABINET tokyocabinet)
# ENDIF(USE_TOKYO_CABINET)

LIST(GET OPENSSL_LIBRARIES 0 OPENSSL_FIRSTLIB)
GET_FILENAME_COMPONENT(OPENSSL_LIBDIR ${OPENSSL_FIRSTLIB} PATH)
FIND_LIBRARY(LIB_CRYPTO crypto ${OPENSSL_LIBDIR})
FIND_LIBRARY(LIB_PTHREAD pthread)
FIND_LIBRARY(LIB_BOOST_FILESYSTEM NAMES boost_filesystem-mt boost_filesystem)
FIND_LIBRARY(LIB_BOOST_REGEX NAMES boost_regex-mt boost_regex)

#WRITE_FILE(${EXTERNAL_VARS_FILE} "SET(LIB_CRYPTO ${LIB_CRYPTO})" APPEND)
#WRITE_FILE(${EXTERNAL_VARS_FILE} "SET(LIB_CRYPTO ${LIB_CRYPTO})" APPEND)
#WRITE_FILE(${EXTERNAL_VARS_FILE} "SET(LIB_PTHREAD ${LIB_PTHREAD})" APPEND)
IF(NOT LIBC_HAS_REGEX)
  FIND_LIBRARY(LIB_REGEX regex)
  #WRITE_FILE(${EXTERNAL_VARS_FILE} "SET(LIB_REGEX ${LIB_REGEX})" APPEND)
ENDIF(NOT LIBC_HAS_REGEX)
IF(NOT LIBC_HAS_SETSOCKOPT)
  FIND_LIBRARY(LIB_WSOCK wsock32)
  #WRITE_FILE(${EXTERNAL_VARS_FILE} "SET(LIB_WSOCK ${LIB_WSOCK})" APPEND)
ENDIF(NOT LIBC_HAS_SETSOCKOPT)

TARGET_LINK_LIBRARIES(mace ${LIB_PTHREAD} ${LIB_CRYPTO} ${OPENSSL_LIBRARIES} ${LIB_REGEX} ${LIB_WSOCK}) # ${LIB_BOOST_FILESYSTEM} ${LIB_BOOST_REGEX})

#IF(LIB_RT)
#  TARGET_LINK_LIBRARIES(mace ${LIB_RT})
#ENDIF(LIB_RT)
IF(LIB_TOKYO_CABINET)
  TARGET_LINK_LIBRARIES(mace ${LIB_TOKYO_CABINET})
ENDIF(LIB_TOKYO_CABINET)
IF(LIB_GSL)
  TARGET_LINK_LIBRARIES(mace ${LIB_GSL} ${LIB_GSLCBLAS})
ENDIF(LIB_GSL)
IF(LIB_Z)
  TARGET_LINK_LIBRARIES(mace ${LIB_Z} ${LIB_GSLCBLAS})
ENDIF(LIB_Z)
IF(LIB_DL)
  TARGET_LINK_LIBRARIES(mace ${LIB_DL} ${LIB_GSLCBLAS})
ENDIF(LIB_DL)

ADD_SUBDIRECTORY(test)
